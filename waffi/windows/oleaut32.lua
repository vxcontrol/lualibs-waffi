require( 'waffi.headers.ole' )
require( 'waffi.headers.shell' )
local ffi = require( 'ffi' )
ffi.cdef [[
  typedef LPVOID LPDECIMAL; //Alias
  typedef INT DECIMAL; //Alias
  typedef DWORD OLE_COLOR; //Alias
  typedef BSTR *LPBSTR; //Pointer
  typedef LPVOID ITypeLib; //Interface
  typedef LPVOID ITypeInfo; //Interface
  typedef LPVOID IErrorInfo; //Interface
  typedef LPVOID ICreateTypeLib; //Interface
  typedef LPVOID ICreateTypeLib2; //Interface
  typedef LPVOID ICreateErrorInfo; //Interface
  typedef LPVOID DISPPARAMS;
  typedef LPVOID EXCEPINFO;
  typedef struct WINAPI_PICTDESC_u_s1 {
    HBITMAP hbitmap;
    HPALETTE hpal;
  } WINAPI_PICTDESC_u_s1;
  typedef struct WINAPI_PICTDESC_u_s2 {
    HMETAFILE hmeta;
    int xExt;
    int yExt;
  } WINAPI_PICTDESC_u_s2;
  typedef struct WINAPI_PICTDESC_u_s3 {
    HICON hicon;
  } WINAPI_PICTDESC_u_s3;
  typedef struct WINAPI_PICTDESC_u_s4 {
    HENHMETAFILE hemf;
  } WINAPI_PICTDESC_u_s4;
  typedef union WINAPI_PICTDESC_u {
    WINAPI_PICTDESC_u_s1 bmp;
    WINAPI_PICTDESC_u_s2 wmf;
    WINAPI_PICTDESC_u_s3 icon;
    WINAPI_PICTDESC_u_s4 emf;
  } WINAPI_PICTDESC_u;
  typedef UINT WINAPI_PICTYPE; //Alias
  typedef struct PICTDESC {
    UINT cbSizeofstruct;
    WINAPI_PICTYPE picType;
    WINAPI_PICTDESC_u ;
  } PICTDESC;
  typedef PICTDESC *LPPICTDESC; //Pointer
  typedef struct CY {
    unsigned long Lo;
    long Hi;
  } CY;
  typedef CY *LPCY; //Pointer
  typedef struct FONTDESC {
    UINT cbSizeofstruct;
    LPOLESTR lpstrName;
    CY cySize;
    SHORT sWeight;
    SHORT sCharset;
    BOOL fItalic;
    BOOL fUnderline;
    BOOL fStrikethrough;
  } FONTDESC;
  typedef FONTDESC *LPFONTDESC; //Pointer
  typedef struct OCPFIPARAMS {
    ULONG cbStructSize;
    HWND hWndOwner;
    int x;
    int y;
    LPCOLESTR lpszCaption;
    ULONG cObjects;
    LPUNKNOWN* lplpUnk;
    ULONG cPages;
    CLSID* lpPages;
    LCID lcid;
    DISPID dispidInitialProperty;
  } OCPFIPARAMS;
  typedef OCPFIPARAMS *LPOCPFIPARAMS; //Pointer
  typedef DWORD WINAPI_OleLoadPictureExFlags; //Alias
  static const WINAPI_OleLoadPictureExFlags LP_DEFAULT = 0x00;
  static const WINAPI_OleLoadPictureExFlags LP_MONOCHROME = 0x01;
  static const WINAPI_OleLoadPictureExFlags LP_VGACOLOR = 0x02;
  static const WINAPI_OleLoadPictureExFlags LP_COLOR = 0x04;
  typedef UINT REGKIND; //Alias
  static const REGKIND REGKIND_DEFAULT = 0;
  static const REGKIND REGKIND_REGISTER = 1;
  static const REGKIND REGKIND_NONE = 2;
  typedef struct UDATE {
    SYSTEMTIME st;
    USHORT wDayOfYear;
  } UDATE;
  typedef ULONG WINAPI_NUMPRS_FLAG; //Alias
  typedef struct NUMPARSE {
    INT cDig;
    WINAPI_NUMPRS_FLAG dwInFlags;
    WINAPI_NUMPRS_FLAG dwOutFlags;
    INT cchUsed;
    INT nBaseShift;
    INT nPwr10;
  } NUMPARSE;
  typedef struct PARAMDATA {
    OLECHAR* szName;
    VARTYPE vt;
  } PARAMDATA;
  typedef struct METHODDATA {
    OLECHAR* szName;
    PARAMDATA* ppdata;
    DISPID dispid;
    UINT iMeth;
    CALLCONV cc;
    UINT cArgs;
    WINAPI_InvokeFlags wFlags;
    VARTYPE vtReturn;
  } METHODDATA;
  typedef struct INTERFACEDATA {
    METHODDATA* pmethdata;
    UINT cMembers;
  } INTERFACEDATA;
  typedef enum tagSYSKIND { 
  SYS_WIN16  = 0,
  SYS_WIN32  = ( SYS_WIN16 + 1 ),
  SYS_MAC    = ( SYS_WIN32 + 1 ),
  SYS_WIN64  = ( SYS_MAC + 1 )
} SYSKIND;
  HCURSOR        OleIconToCursor(                 HINSTANCE hinstExe, HICON hIcon);
  HRESULT        OleCreateFontIndirect(           LPFONTDESC lpFontDesc, REFIID riid, LPVOID* lplpvObj);
  HRESULT        OleCreatePictureIndirect(        LPPICTDESC lpPictDesc, REFIID riid, BOOL fOwn, LPVOID* lplpvObj);
  HRESULT        OleLoadPicture(                  LPSTREAM lpstream, LONG lSize, BOOL fRunmode, REFIID riid, LPVOID* lplpvObj);
  HRESULT        OleLoadPictureEx(                LPSTREAM lpstream, LONG lSize, BOOL fRunmode, REFIID riid, DWORD xSizeDesired, DWORD ySizeDesired, WINAPI_OleLoadPictureExFlags dwFlags, LPVOID* lplpvObj);
  HRESULT        OleCreatePropertyFrame(          HWND hwndOwner, UINT x, UINT y, LPCOLESTR lpszCaption, ULONG cObjects, LPUNKNOWN* ppUnk, ULONG cPages, LPCLSID pPageClsID, LCID lcid, DWORD dwReserved, LPVOID pvReserved);
  HRESULT        OleCreatePropertyFrameIndirect(  LPOCPFIPARAMS lpParams);
  HRESULT        OleLoadPicturePath(              LPOLESTR szURLorPath, LPUNKNOWN punkCaller, DWORD dwReserved, OLE_COLOR clrReserved, REFIID riid, LPVOID* ppvRet);
  HRESULT        OleTranslateColor(               OLE_COLOR clr, HPALETTE hpal, COLORREF* lpcolorref);
  HRESULT        SafeArrayAccessData(             SAFEARRAY* psa, void** ppvData);
  HRESULT        SafeArrayAllocData(              SAFEARRAY* psa);
  HRESULT        SafeArrayAllocDescriptor(        UINT cDims, SAFEARRAY** ppsaOut);
  HRESULT        SafeArrayAllocDescriptorEx(      VARTYPE vt, UINT cDims, SAFEARRAY** ppsaOut);
  HRESULT        SafeArrayCopy(                   SAFEARRAY* psa, SAFEARRAY** ppsaOut);
  HRESULT        SafeArrayCopyData(               SAFEARRAY* psaSource, SAFEARRAY* psaTarget);
  SAFEARRAY*     SafeArrayCreate(                 VARTYPE vt, UINT cDims, SAFEARRAYBOUND* rgsabound);
  SAFEARRAY*     SafeArrayCreateEx(               VARTYPE vt, UINT cDims, SAFEARRAYBOUND* rgsabound, PVOID pvExtra);
  SAFEARRAY*     SafeArrayCreateVector(           VARTYPE vt, LONG lLbound, ULONG cElements);
  SAFEARRAY*     SafeArrayCreateVectorEx(         VARTYPE vt, LONG lLbound, ULONG cElements, PVOID pvExtra);
  HRESULT        SafeArrayDestroy(                SAFEARRAY* psa);
  HRESULT        SafeArrayDestroyData(            SAFEARRAY* psa);
  HRESULT        SafeArrayDestroyDescriptor(      SAFEARRAY* psa);
  UINT           SafeArrayGetDim(                 SAFEARRAY* psa);
  HRESULT        SafeArrayGetElement(             SAFEARRAY* psa, LONG* rgIndices, void* pv);
  UINT           SafeArrayGetElemsize(            SAFEARRAY* psa);
  HRESULT        SafeArrayGetIID(                 SAFEARRAY* psa, GUID* pguid);
  HRESULT        SafeArrayGetLBound(              SAFEARRAY* psa, UINT nDim, LONG* plLbound);
  HRESULT        SafeArrayGetRecordInfo(          SAFEARRAY* psa, IRecordInfo** prinfo);
  HRESULT        SafeArrayGetUBound(              SAFEARRAY* psa, UINT nDim, LONG* plUbound);
  HRESULT        SafeArrayGetVartype(             SAFEARRAY* psa, VARTYPE* pvt);
  HRESULT        SafeArrayLock(                   SAFEARRAY* psa);
  HRESULT        SafeArrayPtrOfIndex(             SAFEARRAY* psa, LONG* rgIndices, void** ppvData);
  HRESULT        SafeArrayPutElement(             SAFEARRAY* psa, LONG* rgIndices, void* pv);
  HRESULT        SafeArrayRedim(                  SAFEARRAY* psa, SAFEARRAYBOUND* psaboundNew);
  HRESULT        SafeArraySetIID(                 SAFEARRAY* psa, REFGUID guid);
  HRESULT        SafeArraySetRecordInfo(          SAFEARRAY* psa, IRecordInfo* prinfo);
  HRESULT        SafeArrayUnaccessData(           SAFEARRAY* psa);
  HRESULT        SafeArrayUnlock(                 SAFEARRAY* psa);
  HRESULT        BstrFromVector(                  SAFEARRAY* psa, BSTR* pbstr);
  void           SetOaNoCache(                    );
  HRESULT        VarBstrCat(                      BSTR bstrLeft, BSTR bstrRight, LPBSTR pbstrResult);
  HRESULT        VarBstrCmp(                      BSTR bstrLeft, BSTR bstrRight, LCID lcid, ULONG dwFlags);
  HRESULT        VectorFromBstr(                  BSTR bstr, SAFEARRAY** ppsa);
  HRESULT        VarCyAbs(                        CY cyIn, LPCY pcyResult);
  HRESULT        VarCyAdd(                        CY cyLeft, CY cyRight, LPCY pcyResult);
  HRESULT        VarCyCmp(                        CY cyLeft, CY cyRight);
  HRESULT        VarCyCmpR8(                      CY cyLeft, double dblRight);
  HRESULT        VarCyFix(                        CY cyIn, LPCY pcyResult);
  HRESULT        VarCyInt(                        CY cyIn, LPCY pcyResult);
  HRESULT        VarCyMul(                        CY cyLeft, CY cyRight, LPCY pcyResult);
  HRESULT        VarCyMulI4(                      CY cyLeft, long lRight, LPCY pcyResult);
  HRESULT        VarCyMulI8(                      CY cyLeft, LONG64 lRight, LPCY pcyResult);
  HRESULT        VarCyNeg(                        CY cyIn, LPCY pcyResult);
  HRESULT        VarCyRound(                      CY cyIn, int cDecimals, LPCY pcyResult);
  HRESULT        VarCySub(                        CY cyLeft, CY cyRight, LPCY pcyResult);
  HRESULT        GetVarConversionLocaleSetting(   ULONG* dwFlags);
  HRESULT        SetVarConversionLocaleSetting(   ULONG dwFlags);
  HRESULT        VarI1FromUI1(                    BYTE bIn, CHAR* pcOut);
  HRESULT        VarI1FromUI2(                    USHORT uiIn, CHAR* pcOut);
  HRESULT        VarI1FromUI4(                    ULONG ulIn, CHAR* pcOut);
  HRESULT        VarI1FromUI8(                    ULONG64 i64In, CHAR* pcOut);
  HRESULT        VarI1FromI2(                     SHORT uiIn, CHAR* pcOut);
  HRESULT        VarI1FromI4(                     LONG lIn, CHAR* pcOut);
  HRESULT        VarI1FromI8(                     LONG64 i64In, CHAR* pcOut);
  HRESULT        VarI1FromR4(                     FLOAT fltIn, CHAR* pcOut);
  HRESULT        VarI1FromR8(                     DOUBLE dblIn, CHAR* pcOut);
  HRESULT        VarI1FromCy(                     CY cyIn, CHAR* pcOut);
  HRESULT        VarI1FromDec(                    const DECIMAL* pdecIn, CHAR* pcOut);
  HRESULT        VarI1FromDate(                   DATE dateIn, CHAR* pcOut);
  HRESULT        VarI1FromStr(                    LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CHAR* pcOut);
  HRESULT        VarI1FromDisp(                   IDispatch* pdispIn, LCID lcid, CHAR* pcOut);
  HRESULT        VarI1FromBool(                   VARIANT_BOOL boolIn, CHAR* pcOut);
  HRESULT        VarUI1FromUI2(                   USHORT uiIn, BYTE* pbOut);
  HRESULT        VarUI1FromUI4(                   ULONG ulIn, BYTE* pbOut);
  HRESULT        VarUI1FromUI8(                   ULONG64 i64In, BYTE* pbOut);
  HRESULT        VarUI1FromI1(                    CHAR cIn, BYTE* pbOut);
  HRESULT        VarUI1FromI2(                    SHORT sIn, BYTE* pbOut);
  HRESULT        VarUI1FromI4(                    LONG lIn, BYTE* pbOut);
  HRESULT        VarUI1FromI8(                    LONG64 i64In, BYTE* pbOut);
  HRESULT        VarUI1FromR4(                    FLOAT fltIn, BYTE* pbOut);
  HRESULT        VarUI1FromR8(                    DOUBLE dblIn, BYTE* pbOut);
  HRESULT        VarUI1FromCy(                    CY cyIn, BYTE* pbOut);
  HRESULT        VarUI1FromDec(                   const DECIMAL* pdecIn, BYTE* pbOut);
  HRESULT        VarUI1FromDate(                  DATE dateIn, BYTE* pbOut);
  HRESULT        VarUI1FromStr(                   LPCOLESTR strIn, LCID lcid, ULONG dwFlags, BYTE* pbOut);
  HRESULT        VarUI1FromDisp(                  IDispatch* pdispIn, LCID lcid, BYTE* pbOut);
  HRESULT        VarUI1FromBool(                  VARIANT_BOOL boolIn, BYTE* pbOut);
  HRESULT        VarI2FromUI1(                    BYTE bIn, SHORT* psOut);
  HRESULT        VarI2FromUI2(                    USHORT uiIn, SHORT* psOut);
  HRESULT        VarI2FromUI4(                    ULONG ulIn, SHORT* psOut);
  HRESULT        VarI2FromUI8(                    ULONG64 ui64In, SHORT* psOut);
  HRESULT        VarI2FromI1(                     CHAR cIn, SHORT* psOut);
  HRESULT        VarI2FromI4(                     LONG lIn, SHORT* psOut);
  HRESULT        VarI2FromI8(                     LONG64 i64In, SHORT* psOut);
  HRESULT        VarI2FromR4(                     FLOAT fltIn, SHORT* psOut);
  HRESULT        VarI2FromR8(                     DOUBLE dblIn, SHORT* psOut);
  HRESULT        VarI2FromCy(                     CY cyIn, SHORT* psOut);
  HRESULT        VarI2FromDec(                    const DECIMAL* pdecIn, SHORT* psOut);
  HRESULT        VarI2FromDate(                   DATE dateIn, SHORT* psOut);
  HRESULT        VarI2FromStr(                    LPCOLESTR strIn, LCID lcid, ULONG dwFlags, SHORT* psOut);
  HRESULT        VarI2FromDisp(                   IDispatch* pdispIn, LCID lcid, SHORT* psOut);
  HRESULT        VarI2FromBool(                   VARIANT_BOOL boolIn, SHORT* psOut);
  HRESULT        VarUI2FromI1(                    CHAR cIn, USHORT* puiOut);
  HRESULT        VarUI2FromI2(                    SHORT uiIn, USHORT* puiOut);
  HRESULT        VarUI2FromI4(                    LONG lIn, USHORT* puiOut);
  HRESULT        VarUI2FromI8(                    LONG64 i64In, USHORT* puiOut);
  HRESULT        VarUI2FromUI1(                   BYTE bIn, USHORT* puiOut);
  HRESULT        VarUI2FromUI4(                   ULONG ulIn, USHORT* puiOut);
  HRESULT        VarUI2FromUI8(                   ULONG64 i64In, USHORT* puiOut);
  HRESULT        VarUI2FromR4(                    FLOAT fltIn, USHORT* puiOut);
  HRESULT        VarUI2FromR8(                    DOUBLE dblIn, USHORT* puiOut);
  HRESULT        VarUI2FromCy(                    CY cyIn, USHORT* puiOut);
  HRESULT        VarUI2FromDec(                   const DECIMAL* pdecIn, USHORT* puiOut);
  HRESULT        VarUI2FromDate(                  DATE dateIn, USHORT* puiOut);
  HRESULT        VarUI2FromStr(                   LPCOLESTR strIn, LCID lcid, ULONG dwFlags, USHORT* puiOut);
  HRESULT        VarUI2FromDisp(                  IDispatch* pdispIn, LCID lcid, USHORT* puiOut);
  HRESULT        VarUI2FromBool(                  VARIANT_BOOL boolIn, USHORT* puiOut);
  HRESULT        VarI4FromUI2(                    USHORT uiIn, LONG* plOut);
  HRESULT        VarI4FromUI4(                    ULONG ulIn, LONG* plOut);
  HRESULT        VarI4FromUI8(                    ULONG64 ui64In, LONG* plOut);
  HRESULT        VarI4FromI1(                     CHAR cIn, LONG* plOut);
  HRESULT        VarI4FromUI1(                    BYTE bIn, LONG* plOut);
  HRESULT        VarI4FromI2(                     SHORT sIn, LONG* plOut);
  HRESULT        VarI4FromI8(                     LONG64 i64In, LONG* plOut);
  HRESULT        VarI4FromR4(                     FLOAT fltIn, LONG* plOut);
  HRESULT        VarI4FromR8(                     DOUBLE dblIn, LONG* plOut);
  HRESULT        VarI4FromCy(                     CY cyIn, LONG* plOut);
  HRESULT        VarI4FromDec(                    const DECIMAL* pdecIn, LONG* plOut);
  HRESULT        VarI4FromDate(                   DATE dateIn, LONG* plOut);
  HRESULT        VarI4FromStr(                    LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG* plOut);
  HRESULT        VarI4FromDisp(                   IDispatch* pdispIn, LCID lcid, LONG* plOut);
  HRESULT        VarI4FromBool(                   VARIANT_BOOL boolIn, LONG* plOut);
  HRESULT        VarUI4FromUI2(                   USHORT uiIn, ULONG* pulOut);
  HRESULT        VarUI4FromI1(                    CHAR cIn, ULONG* pulOut);
  HRESULT        VarUI4FromI2(                    SHORT uiIn, ULONG* pulOut);
  HRESULT        VarUI4FromUI1(                   BYTE bIn, ULONG* pulOut);
  HRESULT        VarUI4FromUI8(                   ULONG64 ui64In, ULONG* plOut);
  HRESULT        VarUI4FromI4(                    LONG lIn, ULONG* pulOut);
  HRESULT        VarUI4FromI8(                    LONG64 i64In, ULONG* plOut);
  HRESULT        VarUI4FromR4(                    FLOAT fltIn, ULONG* pulOut);
  HRESULT        VarUI4FromR8(                    DOUBLE dblIn, ULONG* pulOut);
  HRESULT        VarUI4FromCy(                    CY cyIn, ULONG* pulOut);
  HRESULT        VarUI4FromDec(                   const DECIMAL* pdecIn, ULONG* pulOut);
  HRESULT        VarUI4FromDate(                  DATE dateIn, ULONG* pulOut);
  HRESULT        VarUI4FromStr(                   LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG* pulOut);
  HRESULT        VarUI4FromDisp(                  IDispatch* pdispIn, LCID lcid, ULONG* pulOut);
  HRESULT        VarUI4FromBool(                  VARIANT_BOOL boolIn, ULONG* pulOut);
  HRESULT        VarR4FromUI2(                    USHORT uiIn, FLOAT* pfltOut);
  HRESULT        VarR4FromUI4(                    ULONG ulIn, FLOAT* pfltOut);
  HRESULT        VarR4FromUI8(                    ULONG64 ui64In, FLOAT* pfltOut);
  HRESULT        VarR4FromI1(                     CHAR cIn, FLOAT* pfltOut);
  HRESULT        VarR4FromUI1(                    BYTE bIn, FLOAT* pfltOut);
  HRESULT        VarR4FromI2(                     SHORT sIn, FLOAT* pfltOut);
  HRESULT        VarR4FromI4(                     LONG lIn, FLOAT* pfltOut);
  HRESULT        VarR4FromI8(                     LONG64 i64In, FLOAT* pfltOut);
  HRESULT        VarR4FromR8(                     DOUBLE dblIn, FLOAT* pfltOut);
  HRESULT        VarR4FromCy(                     CY cyIn, FLOAT* pfltOut);
  HRESULT        VarR4FromDec(                    const DECIMAL* pdecIn, FLOAT* pfltOut);
  HRESULT        VarR4FromDate(                   DATE dateIn, FLOAT* pfltOut);
  HRESULT        VarR4FromStr(                    LPCOLESTR strIn, LCID lcid, ULONG dwFlags, FLOAT* pfltOut);
  HRESULT        VarR4FromDisp(                   IDispatch* pdispIn, LCID lcid, FLOAT* pfltOut);
  HRESULT        VarR4FromBool(                   VARIANT_BOOL boolIn, FLOAT* pfltOut);
  HRESULT        VarR8FromUI2(                    USHORT uiIn, DOUBLE* pdblOut);
  HRESULT        VarR8FromUI4(                    ULONG ulIn, DOUBLE* pdblOut);
  HRESULT        VarR8FromUI8(                    ULONG64 ui64In, DOUBLE* pdblOut);
  HRESULT        VarR8FromI1(                     CHAR cIn, DOUBLE* pdblOut);
  HRESULT        VarR8FromUI1(                    BYTE bIn, DOUBLE* pdblOut);
  HRESULT        VarR8FromI2(                     SHORT sIn, DOUBLE* pdblOut);
  HRESULT        VarR8FromI4(                     LONG lIn, DOUBLE* pdblOut);
  HRESULT        VarR8FromI8(                     LONG64 i64In, DOUBLE* pdblOut);
  HRESULT        VarR8FromR4(                     FLOAT fltIn, DOUBLE* pdblOut);
  HRESULT        VarR8FromCy(                     CY cyIn, DOUBLE* pdblOut);
  HRESULT        VarR8FromDec(                    const DECIMAL* pdecIn, DOUBLE* pdblOut);
  HRESULT        VarR8FromDate(                   DATE dateIn, DOUBLE* pdblOut);
  HRESULT        VarR8FromStr(                    LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DOUBLE* pdblOut);
  HRESULT        VarR8FromDisp(                   IDispatch* pdispIn, LCID lcid, DOUBLE* pdblOut);
  HRESULT        VarR8FromBool(                   VARIANT_BOOL boolIn, DOUBLE* pdblOut);
  HRESULT        VarDateFromUI2(                  USHORT uiIn, DATE* pdateOut);
  HRESULT        VarDateFromUI4(                  ULONG ulIn, DATE* pdateOut);
  HRESULT        VarDateFromUI8(                  ULONG64 ui64In, DATE* pdateOut);
  HRESULT        VarDateFromI1(                   CHAR cIn, DATE* pdateOut);
  HRESULT        VarDateFromUI1(                  BYTE bIn, DATE* pdateOut);
  HRESULT        VarDateFromI2(                   SHORT sIn, DATE* pdateOut);
  HRESULT        VarDateFromI4(                   LONG lIn, DATE* pdateOut);
  HRESULT        VarDateFromI8(                   LONG64 i64In, DATE* pdateOut);
  HRESULT        VarDateFromR4(                   FLOAT fltIn, DATE* pdateOut);
  HRESULT        VarDateFromR8(                   DOUBLE dblIn, DATE* pdateOut);
  HRESULT        VarDateFromCy(                   CY cyIn, DATE* pdateOut);
  HRESULT        VarDateFromDec(                  const DECIMAL* pdecIn, DATE* pdateOut);
  HRESULT        VarDateFromStr(                  LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DATE* pdateOut);
  HRESULT        VarDateFromDisp(                 IDispatch* pdispIn, LCID lcid, DATE* pdateOut);
  HRESULT        VarDateFromBool(                 VARIANT_BOOL boolIn, DATE* pdateOut);
  HRESULT        VarCyFromUI2(                    USHORT uiIn, CY* pcyOut);
  HRESULT        VarCyFromUI4(                    ULONG ulIn, CY* pcyOut);
  HRESULT        VarCyFromUI8(                    ULONG64 ui64In, CY* pcyOut);
  HRESULT        VarCyFromI1(                     CHAR cIn, CY* pcyOut);
  HRESULT        VarCyFromUI1(                    BYTE bIn, CY* pcyOut);
  HRESULT        VarCyFromI2(                     SHORT sIn, CY* pcyOut);
  HRESULT        VarCyFromI4(                     LONG lIn, CY* pcyOut);
  HRESULT        VarCyFromI8(                     LONG64 i64In, CY* pcyOut);
  HRESULT        VarCyFromR4(                     FLOAT fltIn, CY* pcyOut);
  HRESULT        VarCyFromR8(                     DOUBLE dblIn, CY* pcyOut);
  HRESULT        VarCyFromDec(                    const DECIMAL* pdecIn, CY* pcyOut);
  HRESULT        VarCyFromDate(                   DATE dateIn, CY* pcyOut);
  HRESULT        VarCyFromStr(                    LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CY* pcyOut);
  HRESULT        VarCyFromDisp(                   IDispatch* pdispIn, LCID lcid, CY* pcyOut);
  HRESULT        VarCyFromBool(                   VARIANT_BOOL boolIn, CY* pcyOut);
  HRESULT        VarBstrFromUI2(                  USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
  HRESULT        VarBstrFromUI4(                  ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
  HRESULT        VarBstrFromUI8(                  ULONG64 ui64In, LCID lcid, unsigned long dwFlags, BSTR* pbstrOut);
  HRESULT        VarBstrFromI1(                   CHAR cIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
  HRESULT        VarBstrFromUI1(                  BYTE bVal, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
  HRESULT        VarBstrFromI2(                   SHORT iVal, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
  HRESULT        VarBstrFromI4(                   LONG lIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
  HRESULT        VarBstrFromI8(                   LONG64 i64In, LCID lcid, unsigned long dwFlags, BSTR* pbstrOut);
  HRESULT        VarBstrFromR4(                   FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
  HRESULT        VarBstrFromR8(                   DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
  HRESULT        VarBstrFromCy(                   CY cyIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
  HRESULT        VarBstrFromDec(                  const DECIMAL* pdecIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
  HRESULT        VarBstrFromDate(                 DATE dateIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
  HRESULT        VarBstrFromDisp(                 IDispatch* pdispIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
  HRESULT        VarBstrFromBool(                 VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
  HRESULT        VarBoolFromUI2(                  USHORT uiIn, VARIANT_BOOL* pboolOut);
  HRESULT        VarBoolFromUI4(                  ULONG ulIn, VARIANT_BOOL* pboolOut);
  HRESULT        VarBoolFromUI8(                  ULONG64 i64In, VARIANT_BOOL* pboolOut);
  HRESULT        VarBoolFromI1(                   CHAR cIn, VARIANT_BOOL* pboolOut);
  HRESULT        VarBoolFromUI1(                  BYTE bIn, VARIANT_BOOL* pboolOut);
  HRESULT        VarBoolFromI2(                   SHORT sIn, VARIANT_BOOL* pboolOut);
  HRESULT        VarBoolFromI4(                   LONG lIn, VARIANT_BOOL* pboolOut);
  HRESULT        VarBoolFromI8(                   LONG64 i64In, VARIANT_BOOL* pboolOut);
  HRESULT        VarBoolFromR4(                   FLOAT fltIn, VARIANT_BOOL* pboolOut);
  HRESULT        VarBoolFromR8(                   DOUBLE dblIn, VARIANT_BOOL* pboolOut);
  HRESULT        VarBoolFromCy(                   CY cyIn, VARIANT_BOOL* pboolOut);
  HRESULT        VarBoolFromDec(                  const DECIMAL* pdecIn, VARIANT_BOOL* pboolOut);
  HRESULT        VarBoolFromDate(                 DATE dateIn, VARIANT_BOOL* pboolOut);
  HRESULT        VarBoolFromStr(                  LPCOLESTR strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL* pboolOut);
  HRESULT        VarBoolFromDisp(                 IDispatch* pdispIn, LCID lcid, VARIANT_BOOL* pboolOut);
  HRESULT        VarDecFromUI2(                   USHORT uiIn, DECIMAL* pdecOut);
  HRESULT        VarDecFromUI4(                   ULONG ulIn, DECIMAL* pdecOut);
  HRESULT        VarDecFromUI8(                   ULONG64 ui64In, DECIMAL* pdecOut);
  HRESULT        VarDecFromI1(                    CHAR cIn, DECIMAL* pdecOut);
  HRESULT        VarDecFromUI1(                   BYTE bIn, DECIMAL* pdecOut);
  HRESULT        VarDecFromI2(                    SHORT uiIn, DECIMAL* pdecOut);
  HRESULT        VarDecFromI4(                    LONG lIn, DECIMAL* pdecOut);
  HRESULT        VarDecFromI8(                    LONG64 i64In, DECIMAL* pdecOut);
  HRESULT        VarDecFromR4(                    FLOAT fltIn, DECIMAL* pdecOut);
  HRESULT        VarDecFromR8(                    DOUBLE dblIn, DECIMAL* pdecOut);
  HRESULT        VarDecFromCy(                    CY cyIn, DECIMAL* pdecOut);
  HRESULT        VarDecFromDate(                  DATE dateIn, DECIMAL* pdecOut);
  HRESULT        VarDecFromStr(                   LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DECIMAL* pdecOut);
  HRESULT        VarDecFromDisp(                  IDispatch* pdispIn, LCID lcid, DECIMAL* pdecOut);
  HRESULT        VarDecFromBool(                  VARIANT_BOOL boolIn, DECIMAL* pdecOut);
  HRESULT        VarI8FromBool(                   VARIANT_BOOL boolIn, LONG64* pi64Out);
  HRESULT        VarI8FromCy(                     CY cyIn, LONG64* pi64Out);
  HRESULT        VarI8FromDate(                   DATE dateIn, LONG64* pi64Out);
  HRESULT        VarI8FromDec(                    const DECIMAL* pdecIn, LONG64* pi64Out);
  HRESULT        VarI8FromDisp(                   IDispatch* pdispIn, LCID lcid, LONG64* pi64Out);
  HRESULT        VarI8FromI1(                     CHAR cIn, LONG64* pi64Out);
  HRESULT        VarI8FromI2(                     SHORT sIn, LONG64* pi64Out);
  HRESULT        VarI8FromR4(                     FLOAT fltIn, LONG64* pi64Out);
  HRESULT        VarI8FromR8(                     DOUBLE dblIn, LONG64* pi64Out);
  HRESULT        VarI8FromStr(                    LPCOLESTR strIn, LCID lcid, unsigned long dwFlags, LONG64* pi64Out);
  HRESULT        VarI8FromUI1(                    BYTE bIn, LONG64* pi64Out);
  HRESULT        VarI8FromUI2(                    USHORT uiIn, LONG64* pi64Out);
  HRESULT        VarI8FromUI4(                    ULONG ulIn, LONG64* pi64Out);
  HRESULT        VarI8FromUI8(                    ULONG64 ui64In, LONG64* pi64Out);
  HRESULT        VarUI8FromBool(                  VARIANT_BOOL boolIn, ULONG64* pi64Out);
  HRESULT        VarUI8FromCy(                    CY cyIn, ULONG64* pi64Out);
  HRESULT        VarUI8FromDate(                  DATE dateIn, ULONG64* pi64Out);
  HRESULT        VarUI8FromDec(                   const DECIMAL* pdecIn, ULONG64* pi64Out);
  HRESULT        VarUI8FromDisp(                  IDispatch* pdispIn, LCID lcid, ULONG64* pi64Out);
  HRESULT        VarUI8FromI1(                    CHAR cIn, ULONG64* pi64Out);
  HRESULT        VarUI8FromI2(                    SHORT sIn, ULONG64* pi64Out);
  HRESULT        VarUI8FromI8(                    LONG64 ui64In, ULONG64* pi64Out);
  HRESULT        VarUI8FromR4(                    FLOAT fltIn, ULONG64* pi64Out);
  HRESULT        VarUI8FromR8(                    DOUBLE dblIn, ULONG64* pi64Out);
  HRESULT        VarUI8FromStr(                   LPCOLESTR strIn, LCID lcid, unsigned long dwFlags, ULONG64* pi64Out);
  HRESULT        VarUI8FromUI1(                   BYTE bIn, ULONG64* pi64Out);
  HRESULT        VarUI8FromUI2(                   USHORT uiIn, ULONG64* pi64Out);
  HRESULT        VarUI8FromUI4(                   ULONG ulIn, ULONG64* pi64Out);
  INT            DosDateTimeToVariantTime(        USHORT wDosDate, USHORT wDosTime, DOUBLE* pvtime);
  HRESULT        GetAltMonthNames(                LCID lcid, LPOLESTR** prgp);
  INT            SystemTimeToVariantTime(         LPSYSTEMTIME lpSystemTime, DOUBLE* pvtime);
  HRESULT        VarDateFromUdate(                UDATE* pudateIn, ULONG dwFlags, DATE* pdateOut);
  HRESULT        VarDateFromUdateEx(              UDATE* pudateIn, LCID lcid, ULONG dwFlags, DATE* pdateOut);
  INT            VariantTimeToDosDateTime(        DOUBLE vtime, USHORT* pwDosDate, USHORT* pwDosTime);
  INT            VariantTimeToSystemTime(         DOUBLE vtime, LPSYSTEMTIME lpSystemTime);
  HRESULT        VarUdateFromDate(                DATE dateIn, ULONG dwFlags, UDATE* pudateOut);
  HRESULT        VarDecAbs(                       LPDECIMAL pdecIn, LPDECIMAL pdecResult);
  HRESULT        VarDecAdd(                       LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
  HRESULT        VarDecCmp(                       LPDECIMAL pdecLeft, LPDECIMAL pdecRight);
  HRESULT        VarDecCmpR8(                     LPDECIMAL pdecLeft, double dblRight);
  HRESULT        VarDecDiv(                       LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
  HRESULT        VarDecFix(                       LPDECIMAL pdecIn, LPDECIMAL pdecResult);
  HRESULT        VarDecInt(                       LPDECIMAL pdecIn, LPDECIMAL pdecResult);
  HRESULT        VarDecMul(                       LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
  HRESULT        VarDecNeg(                       LPDECIMAL pdecIn, LPDECIMAL pdecResult);
  HRESULT        VarDecRound(                     LPDECIMAL pdecIn, int cDecimals, LPDECIMAL pdecResult);
  HRESULT        VarDecSub(                       LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
  HRESULT        VarNumFromParseNum(              NUMPARSE* pnumprs, BYTE* rgbDig, ULONG dwVtBits, VARIANT* pvar);
  HRESULT        VarParseNumFromStr(              LPCOLESTR strIn, LCID lcid, ULONG dwFlags, NUMPARSE* pnumprs, BYTE* rgbDig);
  void           BSTR_UserFree(                   unsigned long* pFlags, BSTR* pBstr);
  void           BSTR_UserFree64(                 unsigned long* pFlags, BSTR* pBstr);
  unsigned char* BSTR_UserMarshal(                unsigned long* pFlags, unsigned char* pBuffer, BSTR* pBstr);
  unsigned char* BSTR_UserMarshal64(              unsigned long* pFlags, unsigned char* pBuffer, BSTR* pBstr);
  unsigned long  BSTR_UserSize(                   unsigned long* pFlags, unsigned long Offset, BSTR* pBstr);
  unsigned long  BSTR_UserSize64(                 unsigned long* pFlags, unsigned long Offset, BSTR* pBstr);
  unsigned char* BSTR_UserUnmarshal(              unsigned long* pFlags, unsigned char* pBuffer, BSTR* pBstr);
  unsigned char* BSTR_UserUnmarshal64(            unsigned long* pFlags, unsigned char* pBuffer, BSTR* pBstr);
  unsigned char* LPSAFEARRAY_Marshal(             unsigned long* pFlags, unsigned char* pBuffer, LPSAFEARRAY* ppSafeArray, const IID* piid);
  unsigned long  LPSAFEARRAY_Size(                unsigned long* pFlags, unsigned long Offset, LPSAFEARRAY* ppSafeArray, const IID* piid);
  unsigned char* LPSAFEARRAY_Unmarshal(           unsigned long* pFlags, unsigned char* pBuffer, LPSAFEARRAY* ppSafeArray, const IID* piid);
  void           LPSAFEARRAY_UserFree(            unsigned long* pFlags, LPSAFEARRAY* ppSafeArray);
  unsigned char* LPSAFEARRAY_UserMarshal(         unsigned long* pFlags, unsigned char* pBuffer, LPSAFEARRAY* ppSafeArray);
  unsigned long  LPSAFEARRAY_UserSize(            unsigned long* pFlags, unsigned long Offset, LPSAFEARRAY* ppSafeArray);
  unsigned char* LPSAFEARRAY_UserUnmarshal(       unsigned long* pFlags, unsigned char* pBuffer, LPSAFEARRAY* ppSafeArray);
  void           VARIANT_UserFree(                unsigned long* pFlags, VARIANT* pVariant);
  void           VARIANT_UserFree64(              unsigned long* pFlags, VARIANT* pVariant);
  unsigned char* VARIANT_UserMarshal(             unsigned long* pFlags, unsigned char* pBuffer, VARIANT* pVariant);
  unsigned char* VARIANT_UserMarshal64(           unsigned long* pFlags, unsigned char* pBuffer, VARIANT* pVariant);
  unsigned long  VARIANT_UserSize(                unsigned long* pFlags, unsigned long Offset, VARIANT* pVariant);
  unsigned long  VARIANT_UserSize64(              unsigned long* pFlags, unsigned long Offset, VARIANT* pVariant);
  unsigned char* VARIANT_UserUnmarshal(           unsigned long* pFlags, unsigned char* pBuffer, VARIANT* pVariant);
  unsigned char* VARIANT_UserUnmarshal64(         unsigned long* pFlags, unsigned char* pBuffer, VARIANT* pVariant);
  BSTR           SysAllocString(                  const OLECHAR* psz);
  BSTR           SysAllocStringByteLen(           LPCSTR psz, UINT len);
  BSTR           SysAllocStringLen(               const OLECHAR* strIn, UINT ui);
  void           SysFreeString(                   BSTR bstrString);
  INT            SysReAllocString(                BSTR* pbstr, const OLECHAR* psz);
  INT            SysReAllocStringLen(             BSTR* pbstr, const OLECHAR* psz, unsigned int len);
  UINT           SysStringByteLen(                BSTR bstr);
  UINT           SysStringLen(                    BSTR bstr);
  HRESULT        VarAbs(                          LPVARIANT pvarIn, LPVARIANT pvarResult);
  HRESULT        VarAdd(                          LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
  HRESULT        VarAnd(                          LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
  HRESULT        VarCat(                          LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
  HRESULT        VarCmp(                          LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid, ULONG dwFlags);
  HRESULT        VarDiv(                          LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
  HRESULT        VarEqv(                          LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
  HRESULT        VarFix(                          LPVARIANT pvarIn, LPVARIANT pvarResult);
  HRESULT        VarIdiv(                         LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
  HRESULT        VarImp(                          LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
  HRESULT        VarInt(                          LPVARIANT pvarIn, LPVARIANT pvarResult);
  HRESULT        VarMod(                          LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
  HRESULT        VarMul(                          LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
  HRESULT        VarNeg(                          LPVARIANT pvarIn, LPVARIANT pvarResult);
  HRESULT        VarNot(                          LPVARIANT pvarIn, LPVARIANT pvarResult);
  HRESULT        VarOr(                           LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
  HRESULT        VarPow(                          LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
  HRESULT        VarR4CmpR8(                      float fltLeft, double dblRight);
  HRESULT        VarR8Pow(                        double dblLeft, double dblRight, double* pdblResult);
  HRESULT        VarR8Round(                      double dblIn, int cDecimals, double* pdblResult);
  HRESULT        VarRound(                        LPVARIANT pvarIn, int cDecimals, LPVARIANT pvarResult);
  HRESULT        VarSub(                          LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
  HRESULT        VarXor(                          LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
  HRESULT        VariantChangeType(               VARIANTARG* pvargDest, const VARIANTARG* pvarSrc, USHORT wFlags, VARTYPE vt);
  HRESULT        VariantChangeTypeEx(             VARIANTARG* pvargDest, const VARIANTARG* pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt);
  HRESULT        VariantClear(                    VARIANTARG* pvarg);
  HRESULT        VariantCopy(                     VARIANTARG* pvargDest, const VARIANTARG* pvargSrc);
  HRESULT        VariantCopyInd(                  VARIANT* pvarDest, const VARIANTARG* pvargSrc);
  void           VariantInit(                     VARIANTARG* pvarg);
  HRESULT        CreateDispTypeInfo(              INTERFACEDATA* pidata, LCID lcid, ITypeInfo** pptinfo);
  HRESULT        CreateStdDispatch(               IUnknown* punkOuter, void* pvThis, ITypeInfo* ptinfo, IUnknown** ppunkStdDisp);
  HRESULT        DispCallFunc(                    void* pvInstance, ULONG_PTR oVft, CALLCONV cc, VARTYPE vtReturn, UINT cActuals, VARTYPE* prgvt, VARIANTARG** prgpvarg, VARIANT* pvargResult);
  HRESULT        DispGetIDsOfNames(               ITypeInfo* ptinfo, OLECHAR** rgszNames, UINT cNames, DISPID* rgdispid);
  HRESULT        DispGetParam(                    DISPPARAMS* pdispparams, UINT position, VARTYPE vtTarg, VARIANT* pvarResult, UINT* puArgErr);
  HRESULT        DispInvoke(                      void* _this, ITypeInfo* ptinfo, DISPID dispidMember, WORD wFlags, DISPPARAMS* pparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, UINT* puArgErr);
  HRESULT        CreateErrorInfo(                 ICreateErrorInfo** pperrinfo);
  HRESULT        GetErrorInfo(                    ULONG dwReserved, IErrorInfo** pperrinfo);
  HRESULT        SetErrorInfo(                    ULONG dwReserved, IErrorInfo* perrinfo);
  HRESULT        VarFormat(                       LPVARIANT pvarIn, LPOLESTR pstrFormat, int iFirstDay, int iFirstWeek, ULONG dwFlags, BSTR* pbstrOut);
  HRESULT        VarFormatCurrency(               LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR* pbstrOut);
  HRESULT        VarFormatDateTime(               LPVARIANT pvarIn, int iNamedFormat, ULONG dwFlags, BSTR* pbstrOut);
  HRESULT        VarFormatFromTokens(             LPVARIANT pvarIn, LPOLESTR pstrFormat, LPBYTE pbTokCur, ULONG dwFlags, BSTR* pbstrOut, LCID lcid);
  HRESULT        VarFormatNumber(                 LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR* pbstrOut);
  HRESULT        VarFormatPercent(                LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR* pbstrOut);
  HRESULT        VarMonthName(                    int iMonth, int fAbbrev, ULONG dwFlags, BSTR* pbstrOut);
  HRESULT        VarTokenizeFormatString(         LPOLESTR pstrFormat, LPBYTE rgbTok, int cbTok, int iFirstDay, int iFirstWeek, LCID lcid, int* pcbActual);
  HRESULT        VarWeekdayName(                  int iWeekday, int fAbbrev, int iFirstDay, ULONG dwFlags, BSTR* pbstrOut);
  HRESULT        OleLoadPictureFile(              VARIANT varFileName, LPDISPATCH* lplpdispPicture);
  HRESULT        OleLoadPictureFileEx(            VARIANT varFileName, DWORD xSizeDesired, DWORD ySizeDesired, DWORD dwFlags, LPDISPATCH* lplpdispPicture);
  HRESULT        OleSavePictureFile(              LPDISPATCH lpdispPicture, BSTR bstrFileName);
  HRESULT        GetActiveObject(                 REFCLSID rclsid, void* pvReserved, IUnknown** ppunk);
  HRESULT        RegisterActiveObject(            IUnknown* punk, REFCLSID rclsid, DWORD dwFlags, DWORD* pdwRegister);
  HRESULT        RevokeActiveObject(              DWORD dwRegister, void* pvReserved);
  HRESULT        CreateTypeLib(                   SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib** ppctlib);
  HRESULT        CreateTypeLib2(                  SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib2** ppctlib);
  HRESULT        OACreateTypeLib2(                SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib2** ppctlib);
  ULONG          OaBuildVersion(                  );
  ULONG          LHashValOfNameSys(               SYSKIND syskind, LCID lcid, const OLECHAR* szName);
  ULONG          LHashValOfNameSysA(              SYSKIND syskind, LCID lcid, LPCSTR szName);
  HRESULT        LoadRegTypeLib(                  REFGUID rguid, WORD wVerMajor, WORD wVerMinor, LCID lcid, ITypeLib** pptlib);
  HRESULT        LoadTypeLib(                     LPCOLESTR szFile, ITypeLib** pptlib);
  HRESULT        LoadTypeLibEx(                   LPCOLESTR szFile, REGKIND regkind, ITypeLib** pptlib);
  void           OaEnablePerUserTLibRegistration( );
  HRESULT        QueryPathOfRegTypeLib(           REFGUID guid, USHORT wMaj, USHORT wMin, LCID lcid, LPBSTR lpbstrPathName);
  HRESULT        RegisterTypeLib(                 ITypeLib* ptlib, LPCOLESTR szFullPath, LPCOLESTR szHelpDir);
  HRESULT        RegisterTypeLibForUser(          ITypeLib* ptlib, OLECHAR* szFullPath, OLECHAR* szHelpDir);
  HRESULT        UnRegisterTypeLib(               REFGUID libID, WORD wVerMajor, WORD wVerMinor, LCID lcid, SYSKIND syskind);
  HRESULT        UnRegisterTypeLibForUser(        REFGUID libID, WORD wMajorVerNum, WORD wMinorVerNum, LCID lcid, SYSKIND syskind);
  void           ClearCustData(                   LPCUSTDATA pCustData);
  HRESULT        GetRecordInfoFromGuids(          REFGUID rGuidTypeLib, ULONG uVerMajor, ULONG uVerMinor, LCID lcid, REFGUID rGuidTypeInfo, IRecordInfo** ppRecInfo);
  HRESULT        GetRecordInfoFromTypeInfo(       ITypeInfo* pTypeInfo, IRecordInfo** ppRecInfo);
]]
return ffi.load( 'OleAut32.dll' )
