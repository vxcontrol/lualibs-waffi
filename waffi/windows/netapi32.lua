require( 'waffi.headers.windows' )
require( 'waffi.headers.network' )
local ffi = require( 'ffi' )
ffi.cdef [[
  typedef PWSTR PZPWSTR; //Pointer
  typedef LPWSTR LMSTR; //Alias
  typedef ULONG WINAPI_DsDomainFlags; //Alias
  typedef struct DS_DOMAIN_TRUSTSA {
    LPSTR NetbiosDomainName;
    LPSTR DnsDomainName;
    WINAPI_DsDomainFlags Flags;
    ULONG ParentIndex;
    ULONG TrustType;
    ULONG TrustAttributes;
    PSID DomainSid;
    GUID DomainGuid;
  } DS_DOMAIN_TRUSTSA;
  typedef DS_DOMAIN_TRUSTSA *PDS_DOMAIN_TRUSTSA; //Pointer
  typedef struct DS_DOMAIN_TRUSTSW {
    LPWSTR NetbiosDomainName;
    LPWSTR DnsDomainName;
    WINAPI_DsDomainFlags Flags;
    ULONG ParentIndex;
    ULONG TrustType;
    ULONG TrustAttributes;
    PSID DomainSid;
    GUID DomainGuid;
  } DS_DOMAIN_TRUSTSW;
  typedef DS_DOMAIN_TRUSTSW *PDS_DOMAIN_TRUSTSW; //Pointer
  typedef struct DOMAIN_CONTROLLER_INFOA {
    LPSTR DomainControllerName;
    LPSTR DomainControllerAddress;
    ULONG DomainControllerAddressType;
    GUID DomainGuid;
    LPSTR DomainName;
    LPSTR DnsForestName;
    ULONG Flags;
    LPSTR DcSiteName;
    LPSTR ClientSiteName;
  } DOMAIN_CONTROLLER_INFOA;
  typedef DOMAIN_CONTROLLER_INFOA *PDOMAIN_CONTROLLER_INFOA; //Pointer
  typedef struct DOMAIN_CONTROLLER_INFOW {
    LPWSTR DomainControllerName;
    LPWSTR DomainControllerAddress;
    ULONG DomainControllerAddressType;
    GUID DomainGuid;
    LPWSTR DomainName;
    LPWSTR DnsForestName;
    ULONG Flags;
    LPWSTR DcSiteName;
    LPWSTR ClientSiteName;
  } DOMAIN_CONTROLLER_INFOW;
  typedef DOMAIN_CONTROLLER_INFOW *PDOMAIN_CONTROLLER_INFOW; //Pointer
  typedef DWORD NET_API_STATUS; //Alias
  static const NET_API_STATUS NERR_Success = 0;
  static const NET_API_STATUS NERR_NetNotStarted = 2102;
  static const NET_API_STATUS NERR_UnknownServer = 2103;
  static const NET_API_STATUS NERR_ShareMem = 2104;
  static const NET_API_STATUS NERR_NoNetworkResource = 2105;
  static const NET_API_STATUS NERR_RemoteOnly = 2106;
  static const NET_API_STATUS NERR_DevNotRedirected = 2107;
  static const NET_API_STATUS NERR_ServerNotStarted = 2114;
  static const NET_API_STATUS NERR_ItemNotFound = 2115;
  static const NET_API_STATUS NERR_UnknownDevDir = 2116;
  static const NET_API_STATUS NERR_RedirectedPath = 2117;
  static const NET_API_STATUS NERR_DuplicateShare = 2118;
  static const NET_API_STATUS NERR_NoRoom = 2119;
  static const NET_API_STATUS NERR_TooManyItems = 2121;
  static const NET_API_STATUS NERR_InvalidMaxUsers = 2122;
  static const NET_API_STATUS NERR_BufTooSmall = 2123;
  static const NET_API_STATUS NERR_RemoteErr = 2127;
  static const NET_API_STATUS NERR_LanmanIniError = 2131;
  static const NET_API_STATUS NERR_NetworkError = 2136;
  static const NET_API_STATUS NERR_WkstaInconsistentState = 2137;
  static const NET_API_STATUS NERR_WkstaNotStarted = 2138;
  static const NET_API_STATUS NERR_BrowserNotStarted = 2139;
  static const NET_API_STATUS NERR_InternalError = 2140;
  static const NET_API_STATUS NERR_BadTransactConfig = 2141;
  static const NET_API_STATUS NERR_InvalidAPI = 2142;
  static const NET_API_STATUS NERR_BadEventName = 2143;
  static const NET_API_STATUS NERR_DupNameReboot = 2144;
  static const NET_API_STATUS NERR_CfgCompNotFound = 2146;
  static const NET_API_STATUS NERR_CfgParamNotFound = 2147;
  static const NET_API_STATUS NERR_LineTooLong = 2149;
  static const NET_API_STATUS NERR_QNotFound = 2150;
  static const NET_API_STATUS NERR_JobNotFound = 2151;
  static const NET_API_STATUS NERR_DestNotFound = 2152;
  static const NET_API_STATUS NERR_DestExists = 2153;
  static const NET_API_STATUS NERR_QExists = 2154;
  static const NET_API_STATUS NERR_QNoRoom = 2155;
  static const NET_API_STATUS NERR_JobNoRoom = 2156;
  static const NET_API_STATUS NERR_DestNoRoom = 2157;
  static const NET_API_STATUS NERR_DestIdle = 2158;
  static const NET_API_STATUS NERR_DestInvalidOp = 2159;
  static const NET_API_STATUS NERR_ProcNoRespond = 2160;
  static const NET_API_STATUS NERR_SpoolerNotLoaded = 2161;
  static const NET_API_STATUS NERR_DestInvalidState = 2162;
  static const NET_API_STATUS NERR_QInvalidState = 2163;
  static const NET_API_STATUS NERR_JobInvalidState = 2164;
  static const NET_API_STATUS NERR_SpoolNoMemory = 2165;
  static const NET_API_STATUS NERR_DriverNotFound = 2166;
  static const NET_API_STATUS NERR_DataTypeInvalid = 2167;
  static const NET_API_STATUS NERR_ProcNotFound = 2168;
  static const NET_API_STATUS NERR_ServiceTableLocked = 2180;
  static const NET_API_STATUS NERR_ServiceTableFull = 2181;
  static const NET_API_STATUS NERR_ServiceInstalled = 2182;
  static const NET_API_STATUS NERR_ServiceEntryLocked = 2183;
  static const NET_API_STATUS NERR_ServiceNotInstalled = 2184;
  static const NET_API_STATUS NERR_BadServiceName = 2185;
  static const NET_API_STATUS NERR_ServiceCtlTimeout = 2186;
  static const NET_API_STATUS NERR_ServiceCtlBusy = 2187;
  static const NET_API_STATUS NERR_BadServiceProgName = 2188;
  static const NET_API_STATUS NERR_ServiceNotCtrl = 2189;
  static const NET_API_STATUS NERR_ServiceKillProc = 2190;
  static const NET_API_STATUS NERR_ServiceCtlNotValid = 2191;
  static const NET_API_STATUS NERR_NotInDispatchTbl = 2192;
  static const NET_API_STATUS NERR_BadControlRecv = 2193;
  static const NET_API_STATUS NERR_ServiceNotStarting = 2194;
  static const NET_API_STATUS NERR_AlreadyLoggedOn = 2200;
  static const NET_API_STATUS NERR_NotLoggedOn = 2201;
  static const NET_API_STATUS NERR_BadUsername = 2202;
  static const NET_API_STATUS NERR_BadPassword = 2203;
  static const NET_API_STATUS NERR_UnableToAddName_W = 2204;
  static const NET_API_STATUS NERR_UnableToAddName_F = 2205;
  static const NET_API_STATUS NERR_UnableToDelName_W = 2206;
  static const NET_API_STATUS NERR_UnableToDelName_F = 2207;
  static const NET_API_STATUS NERR_LogonsPaused = 2209;
  static const NET_API_STATUS NERR_LogonServerConflict = 2210;
  static const NET_API_STATUS NERR_LogonNoUserPath = 2211;
  static const NET_API_STATUS NERR_LogonScriptError = 2212;
  static const NET_API_STATUS NERR_StandaloneLogon = 2214;
  static const NET_API_STATUS NERR_LogonServerNotFound = 2215;
  static const NET_API_STATUS NERR_LogonDomainExists = 2216;
  static const NET_API_STATUS NERR_NonValidatedLogon = 2217;
  static const NET_API_STATUS NERR_ACFNotFound = 2219;
  static const NET_API_STATUS NERR_GroupNotFound = 2220;
  static const NET_API_STATUS NERR_UserNotFound = 2221;
  static const NET_API_STATUS NERR_ResourceNotFound = 2222;
  static const NET_API_STATUS NERR_GroupExists = 2223;
  static const NET_API_STATUS NERR_UserExists = 2224;
  static const NET_API_STATUS NERR_ResourceExists = 2225;
  static const NET_API_STATUS NERR_NotPrimary = 2226;
  static const NET_API_STATUS NERR_ACFNotLoaded = 2227;
  static const NET_API_STATUS NERR_ACFNoRoom = 2228;
  static const NET_API_STATUS NERR_ACFFileIOFail = 2229;
  static const NET_API_STATUS NERR_ACFTooManyLists = 2230;
  static const NET_API_STATUS NERR_UserLogon = 2231;
  static const NET_API_STATUS NERR_ACFNoParent = 2232;
  static const NET_API_STATUS NERR_CanNotGrowSegment = 2233;
  static const NET_API_STATUS NERR_SpeGroupOp = 2234;
  static const NET_API_STATUS NERR_NotInCache = 2235;
  static const NET_API_STATUS NERR_UserInGroup = 2236;
  static const NET_API_STATUS NERR_UserNotInGroup = 2237;
  static const NET_API_STATUS NERR_AccountUndefined = 2238;
  static const NET_API_STATUS NERR_AccountExpired = 2239;
  static const NET_API_STATUS NERR_InvalidWorkstation = 2240;
  static const NET_API_STATUS NERR_InvalidLogonHours = 2241;
  static const NET_API_STATUS NERR_PasswordExpired = 2242;
  static const NET_API_STATUS NERR_PasswordCantChange = 2243;
  static const NET_API_STATUS NERR_PasswordHistConflict = 2244;
  static const NET_API_STATUS NERR_PasswordTooShort = 2245;
  static const NET_API_STATUS NERR_PasswordTooRecent = 2246;
  static const NET_API_STATUS NERR_InvalidDatabase = 2247;
  static const NET_API_STATUS NERR_DatabaseUpToDate = 2248;
  static const NET_API_STATUS NERR_SyncRequired = 2249;
  static const NET_API_STATUS NERR_UseNotFound = 2250;
  static const NET_API_STATUS NERR_BadAsgType = 2251;
  static const NET_API_STATUS NERR_DeviceIsShared = 2252;
  static const NET_API_STATUS NERR_SameAsComputerName = 2253;
  static const NET_API_STATUS NERR_NoComputerName = 2270;
  static const NET_API_STATUS NERR_MsgAlreadyStarted = 2271;
  static const NET_API_STATUS NERR_MsgInitFailed = 2272;
  static const NET_API_STATUS NERR_NameNotFound = 2273;
  static const NET_API_STATUS NERR_AlreadyForwarded = 2274;
  static const NET_API_STATUS NERR_AddForwarded = 2275;
  static const NET_API_STATUS NERR_AlreadyExists = 2276;
  static const NET_API_STATUS NERR_TooManyNames = 2277;
  static const NET_API_STATUS NERR_DelComputerName = 2278;
  static const NET_API_STATUS NERR_LocalForward = 2279;
  static const NET_API_STATUS NERR_GrpMsgProcessor = 2280;
  static const NET_API_STATUS NERR_PausedRemote = 2281;
  static const NET_API_STATUS NERR_BadReceive = 2282;
  static const NET_API_STATUS NERR_NameInUse = 2283;
  static const NET_API_STATUS NERR_MsgNotStarted = 2284;
  static const NET_API_STATUS NERR_NotLocalName = 2285;
  static const NET_API_STATUS NERR_NoForwardName = 2286;
  static const NET_API_STATUS NERR_RemoteFull = 2287;
  static const NET_API_STATUS NERR_NameNotForwarded = 2288;
  static const NET_API_STATUS NERR_TruncatedBroadcast = 2289;
  static const NET_API_STATUS NERR_InvalidDevice = 2294;
  static const NET_API_STATUS NERR_WriteFault = 2295;
  static const NET_API_STATUS NERR_DuplicateName = 2297;
  static const NET_API_STATUS NERR_DeleteLater = 2298;
  static const NET_API_STATUS NERR_IncompleteDel = 2299;
  static const NET_API_STATUS NERR_MultipleNets = 2300;
  static const NET_API_STATUS NERR_NetNameNotFound = 2310;
  static const NET_API_STATUS NERR_DeviceNotShared = 2311;
  static const NET_API_STATUS NERR_ClientNameNotFound = 2312;
  static const NET_API_STATUS NERR_FileIdNotFound = 2314;
  static const NET_API_STATUS NERR_ExecFailure = 2315;
  static const NET_API_STATUS NERR_TmpFile = 2316;
  static const NET_API_STATUS NERR_TooMuchData = 2317;
  static const NET_API_STATUS NERR_DeviceShareConflict = 2318;
  static const NET_API_STATUS NERR_BrowserTableIncomplete = 2319;
  static const NET_API_STATUS NERR_NotLocalDomain = 2320;
  static const NET_API_STATUS NERR_IsDfsShare = 2321;
  static const NET_API_STATUS NERR_DevInvalidOpCode = 2331;
  static const NET_API_STATUS NERR_DevNotFound = 2332;
  static const NET_API_STATUS NERR_DevNotOpen = 2333;
  static const NET_API_STATUS NERR_BadQueueDevString = 2334;
  static const NET_API_STATUS NERR_BadQueuePriority = 2335;
  static const NET_API_STATUS NERR_NoCommDevs = 2337;
  static const NET_API_STATUS NERR_QueueNotFound = 2338;
  static const NET_API_STATUS NERR_BadDevString = 2340;
  static const NET_API_STATUS NERR_BadDev = 2341;
  static const NET_API_STATUS NERR_InUseBySpooler = 2342;
  static const NET_API_STATUS NERR_CommDevInUse = 2343;
  static const NET_API_STATUS NERR_InvalidComputer = 2351;
  static const NET_API_STATUS NERR_MaxLenExceeded = 2354;
  static const NET_API_STATUS NERR_BadComponent = 2356;
  static const NET_API_STATUS NERR_CantType = 2357;
  static const NET_API_STATUS NERR_TooManyEntries = 2362;
  static const NET_API_STATUS NERR_ProfileFileTooBig = 2370;
  static const NET_API_STATUS NERR_ProfileOffset = 2371;
  static const NET_API_STATUS NERR_ProfileCleanup = 2372;
  static const NET_API_STATUS NERR_ProfileUnknownCmd = 2373;
  static const NET_API_STATUS NERR_ProfileLoadErr = 2374;
  static const NET_API_STATUS NERR_ProfileSaveErr = 2375;
  static const NET_API_STATUS NERR_LogOverflow = 2377;
  static const NET_API_STATUS NERR_LogFileChanged = 2378;
  static const NET_API_STATUS NERR_LogFileCorrupt = 2379;
  static const NET_API_STATUS NERR_SourceIsDir = 2380;
  static const NET_API_STATUS NERR_BadSource = 2381;
  static const NET_API_STATUS NERR_BadDest = 2382;
  static const NET_API_STATUS NERR_DifferentServers = 2383;
  static const NET_API_STATUS NERR_RunSrvPaused = 2385;
  static const NET_API_STATUS NERR_ErrCommRunSrv = 2389;
  static const NET_API_STATUS NERR_ErrorExecingGhost = 2391;
  static const NET_API_STATUS NERR_ShareNotFound = 2392;
  static const NET_API_STATUS NERR_InvalidLana = 2400;
  static const NET_API_STATUS NERR_OpenFiles = 2401;
  static const NET_API_STATUS NERR_ActiveConns = 2402;
  static const NET_API_STATUS NERR_BadPasswordCore = 2403;
  static const NET_API_STATUS NERR_DevInUse = 2404;
  static const NET_API_STATUS NERR_LocalDrive = 2405;
  static const NET_API_STATUS NERR_AlertExists = 2430;
  static const NET_API_STATUS NERR_TooManyAlerts = 2431;
  static const NET_API_STATUS NERR_NoSuchAlert = 2432;
  static const NET_API_STATUS NERR_BadRecipient = 2433;
  static const NET_API_STATUS NERR_AcctLimitExceeded = 2434;
  static const NET_API_STATUS NERR_InvalidLogSeek = 2440;
  static const NET_API_STATUS NERR_BadUasConfig = 2450;
  static const NET_API_STATUS NERR_InvalidUASOp = 2451;
  static const NET_API_STATUS NERR_LastAdmin = 2452;
  static const NET_API_STATUS NERR_DCNotFound = 2453;
  static const NET_API_STATUS NERR_LogonTrackingError = 2454;
  static const NET_API_STATUS NERR_NetlogonNotStarted = 2455;
  static const NET_API_STATUS NERR_CanNotGrowUASFile = 2456;
  static const NET_API_STATUS NERR_TimeDiffAtDC = 2457;
  static const NET_API_STATUS NERR_PasswordMismatch = 2458;
  static const NET_API_STATUS NERR_NoSuchServer = 2460;
  static const NET_API_STATUS NERR_NoSuchSession = 2461;
  static const NET_API_STATUS NERR_NoSuchConnection = 2462;
  static const NET_API_STATUS NERR_TooManyServers = 2463;
  static const NET_API_STATUS NERR_TooManySessions = 2464;
  static const NET_API_STATUS NERR_TooManyConnections = 2465;
  static const NET_API_STATUS NERR_TooManyFiles = 2466;
  static const NET_API_STATUS NERR_NoAlternateServers = 2467;
  static const NET_API_STATUS NERR_TryDownLevel = 2470;
  static const NET_API_STATUS NERR_UPSDriverNotStarted = 2480;
  static const NET_API_STATUS NERR_UPSInvalidConfig = 2481;
  static const NET_API_STATUS NERR_UPSInvalidCommPort = 2482;
  static const NET_API_STATUS NERR_UPSSignalAsserted = 2483;
  static const NET_API_STATUS NERR_UPSShutdownFailed = 2484;
  static const NET_API_STATUS NERR_BadDosRetCode = 2500;
  static const NET_API_STATUS NERR_ProgNeedsExtraMem = 2501;
  static const NET_API_STATUS NERR_BadDosFunction = 2502;
  static const NET_API_STATUS NERR_RemoteBootFailed = 2503;
  static const NET_API_STATUS NERR_BadFileCheckSum = 2504;
  static const NET_API_STATUS NERR_NoRplBootSystem = 2505;
  static const NET_API_STATUS NERR_RplLoadrNetBiosErr = 2506;
  static const NET_API_STATUS NERR_RplLoadrDiskErr = 2507;
  static const NET_API_STATUS NERR_ImageParamErr = 2508;
  static const NET_API_STATUS NERR_TooManyImageParams = 2509;
  static const NET_API_STATUS NERR_NonDosFloppyUsed = 2510;
  static const NET_API_STATUS NERR_RplBootRestart = 2511;
  static const NET_API_STATUS NERR_RplSrvrCallFailed = 2512;
  static const NET_API_STATUS NERR_CantConnectRplSrvr = 2513;
  static const NET_API_STATUS NERR_CantOpenImageFile = 2514;
  static const NET_API_STATUS NERR_CallingRplSrvr = 2515;
  static const NET_API_STATUS NERR_StartingRplBoot = 2516;
  static const NET_API_STATUS NERR_RplBootServiceTerm = 2517;
  static const NET_API_STATUS NERR_RplBootStartFailed = 2518;
  static const NET_API_STATUS NERR_RPL_CONNECTED = 2519;
  static const NET_API_STATUS NERR_BrowserConfiguredToNotRun = 2550;
  static const NET_API_STATUS NERR_RplNoAdaptersStarted = 2610;
  static const NET_API_STATUS NERR_RplBadRegistry = 2611;
  static const NET_API_STATUS NERR_RplBadDatabase = 2612;
  static const NET_API_STATUS NERR_RplRplfilesShare = 2613;
  static const NET_API_STATUS NERR_RplNotRplServer = 2614;
  static const NET_API_STATUS NERR_RplCannotEnum = 2615;
  static const NET_API_STATUS NERR_RplWkstaInfoCorrupted = 2616;
  static const NET_API_STATUS NERR_RplWkstaNotFound = 2617;
  static const NET_API_STATUS NERR_RplWkstaNameUnavailable = 2618;
  static const NET_API_STATUS NERR_RplProfileInfoCorrupted = 2619;
  static const NET_API_STATUS NERR_RplProfileNotFound = 2620;
  static const NET_API_STATUS NERR_RplProfileNameUnavailable = 2621;
  static const NET_API_STATUS NERR_RplProfileNotEmpty = 2622;
  static const NET_API_STATUS NERR_RplConfigInfoCorrupted = 2623;
  static const NET_API_STATUS NERR_RplConfigNotFound = 2624;
  static const NET_API_STATUS NERR_RplAdapterInfoCorrupted = 2625;
  static const NET_API_STATUS NERR_RplInternal = 2626;
  static const NET_API_STATUS NERR_RplVendorInfoCorrupted = 2627;
  static const NET_API_STATUS NERR_RplBootInfoCorrupted = 2628;
  static const NET_API_STATUS NERR_RplWkstaNeedsUserAcct = 2629;
  static const NET_API_STATUS NERR_RplNeedsRPLUSERAcct = 2630;
  static const NET_API_STATUS NERR_RplBootNotFound = 2631;
  static const NET_API_STATUS NERR_RplIncompatibleProfile = 2632;
  static const NET_API_STATUS NERR_RplAdapterNameUnavailable = 2633;
  static const NET_API_STATUS NERR_RplConfigNotEmpty = 2634;
  static const NET_API_STATUS NERR_RplBootInUse = 2635;
  static const NET_API_STATUS NERR_RplBackupDatabase = 2636;
  static const NET_API_STATUS NERR_RplAdapterNotFound = 2637;
  static const NET_API_STATUS NERR_RplVendorNotFound = 2638;
  static const NET_API_STATUS NERR_RplVendorNameUnavailable = 2639;
  static const NET_API_STATUS NERR_RplBootNameUnavailable = 2640;
  static const NET_API_STATUS NERR_RplConfigNameUnavailable = 2641;
  static const NET_API_STATUS NERR_DfsInternalCorruption = 2660;
  static const NET_API_STATUS NERR_DfsVolumeDataCorrupt = 2661;
  static const NET_API_STATUS NERR_DfsNoSuchVolume = 2662;
  static const NET_API_STATUS NERR_DfsVolumeAlreadyExists = 2663;
  static const NET_API_STATUS NERR_DfsAlreadyShared = 2664;
  static const NET_API_STATUS NERR_DfsNoSuchShare = 2665;
  static const NET_API_STATUS NERR_DfsNotALeafVolume = 2666;
  static const NET_API_STATUS NERR_DfsLeafVolume = 2667;
  static const NET_API_STATUS NERR_DfsVolumeHasMultipleServers = 2668;
  static const NET_API_STATUS NERR_DfsCantCreateJunctionPoint = 2669;
  static const NET_API_STATUS NERR_DfsServerNotDfsAware = 2670;
  static const NET_API_STATUS NERR_DfsBadRenamePath = 2671;
  static const NET_API_STATUS NERR_DfsVolumeIsOffline = 2672;
  static const NET_API_STATUS NERR_DfsNoSuchServer = 2673;
  static const NET_API_STATUS NERR_DfsCyclicalName = 2674;
  static const NET_API_STATUS NERR_DfsNotSupportedInServerDfs = 2675;
  static const NET_API_STATUS NERR_DfsDuplicateService = 2676;
  static const NET_API_STATUS NERR_DfsCantRemoveLastServerShare = 2677;
  static const NET_API_STATUS NERR_DfsVolumeIsInterDfs = 2678;
  static const NET_API_STATUS NERR_DfsInconsistent = 2679;
  static const NET_API_STATUS NERR_DfsServerUpgraded = 2680;
  static const NET_API_STATUS NERR_DfsDataIsIdentical = 2681;
  static const NET_API_STATUS NERR_DfsCantRemoveDfsRoot = 2682;
  static const NET_API_STATUS NERR_DfsChildOrParentInDfs = 2683;
  static const NET_API_STATUS NERR_DfsInternalError = 2690;
  static const NET_API_STATUS NERR_SetupAlreadyJoined = 2691;
  static const NET_API_STATUS NERR_SetupNotJoined = 2692;
  static const NET_API_STATUS NERR_SetupDomainController = 2693;
  static const NET_API_STATUS NERR_DefaultJoinRequired = 2694;
  static const NET_API_STATUS NERR_InvalidWorkgroupName = 2695;
  static const NET_API_STATUS NERR_NameUsesIncompatibleCodePage = 2696;
  static const NET_API_STATUS NERR_ComputerAccountNotFound = 2697;
  static const NET_API_STATUS NERR_PersonalSku = 2698;
  static const NET_API_STATUS NERR_SetupCheckDNSConfig = 2699;
  static const NET_API_STATUS NERR_PasswordMustChange = 2701;
  static const NET_API_STATUS NERR_AccountLockedOut = 2702;
  static const NET_API_STATUS NERR_PasswordTooLong = 2703;
  static const NET_API_STATUS NERR_PasswordNotComplexEnough = 2704;
  static const NET_API_STATUS NERR_PasswordFilterError = 2705;
  typedef UINT NET_COMPUTER_NAME_TYPE; //Alias
  static const NET_COMPUTER_NAME_TYPE NetPrimaryComputerName = 0;
  static const NET_COMPUTER_NAME_TYPE NetAlternateComputerNames = 1;
  static const NET_COMPUTER_NAME_TYPE NetAllComputerNames = 2;
  static const NET_COMPUTER_NAME_TYPE NetComputerNameTypeMax = 3;
  typedef UINT NETSETUP_NAME_TYPE; //Alias
  static const NETSETUP_NAME_TYPE NetSetupUnknown = 0;
  static const NETSETUP_NAME_TYPE NetSetupMachine = 1;
  static const NETSETUP_NAME_TYPE NetSetupWorkgroup = 2;
  static const NETSETUP_NAME_TYPE NetSetupDomain = 3;
  static const NETSETUP_NAME_TYPE NetSetupNonExistentDomain = 4;
  static const NETSETUP_NAME_TYPE NetSetupDnsMachine = 5;
  typedef UINT NET_VALIDATE_PASSWORD_TYPE; //Alias
  static const NET_VALIDATE_PASSWORD_TYPE NetValidateAuthentication = 1;
  static const NET_VALIDATE_PASSWORD_TYPE NetValidatePasswordChange = 2;
  static const NET_VALIDATE_PASSWORD_TYPE NetValidatePasswordReset = 3;
  typedef UINT DSROLE_PRIMARY_DOMAIN_INFO_LEVEL; //Alias
  static const DSROLE_PRIMARY_DOMAIN_INFO_LEVEL DsRolePrimaryDomainInfoBasic = 1;
  static const DSROLE_PRIMARY_DOMAIN_INFO_LEVEL DsRoleUpgradeStatus = 2;
  static const DSROLE_PRIMARY_DOMAIN_INFO_LEVEL DsRoleOperationState = 3;
  typedef DWORD WINAPI_ServerType; //Alias
  typedef UINT NETSETUP_JOIN_STATUS; //Alias
  typedef NETSETUP_JOIN_STATUS *PNETSETUP_JOIN_STATUS; //Pointer
  typedef DWORD WINAPI_NetUserGetLocalGroupsFlags; //Alias
  typedef ULONG WINAPI_DsGetDcNameFlags; //Alias
  DWORD          DsAddressToSiteNamesA(             LPCSTR ComputerName, DWORD EntryCount, PSOCKET_ADDRESS SocketAddresses, LPSTR** SiteNames);
  DWORD          DsAddressToSiteNamesW(             LPCWSTR ComputerName, DWORD EntryCount, PSOCKET_ADDRESS SocketAddresses, LPWSTR** SiteNames);
  DWORD          DsAddressToSiteNamesExA(           LPCSTR ComputerName, DWORD EntryCount, PSOCKET_ADDRESS SocketAddresses, LPSTR** SiteNames, LPSTR** SubnetNames);
  DWORD          DsAddressToSiteNamesExW(           LPCWSTR ComputerName, DWORD EntryCount, PSOCKET_ADDRESS SocketAddresses, LPWSTR** SiteNames, LPWSTR** SubnetNames);
  DWORD          DsDeregisterDnsHostRecordsA(       LPSTR ServerName, LPSTR DnsDomainName, GUID* DomainGuid, GUID* DsaGuid, LPSTR DnsHostName);
  DWORD          DsDeregisterDnsHostRecordsW(       LPWSTR ServerName, LPWSTR DnsDomainName, GUID* DomainGuid, GUID* DsaGuid, LPWSTR DnsHostName);
  DWORD          DsEnumerateDomainTrustsA(          LPSTR ServerName, ULONG Flags, PDS_DOMAIN_TRUSTSA* Domains, PULONG DomainCount);
  DWORD          DsEnumerateDomainTrustsW(          LPWSTR ServerName, ULONG Flags, PDS_DOMAIN_TRUSTSW* Domains, PULONG DomainCount);
  void           DsGetDcCloseW(                     HANDLE GetDcContextHandle);
  DWORD          DsGetDcNameA(                      LPCSTR ComputerName, LPCSTR DomainName, GUID* DomainGuid, LPCSTR SiteName, WINAPI_DsGetDcNameFlags Flags, PDOMAIN_CONTROLLER_INFOA* DomainControllerInfo);
  DWORD          DsGetDcNameW(                      LPCWSTR ComputerName, LPCWSTR DomainName, GUID* DomainGuid, LPCWSTR SiteName, WINAPI_DsGetDcNameFlags Flags, PDOMAIN_CONTROLLER_INFOW* DomainControllerInfo);
  DWORD          DsGetDcNextA(                      HANDLE GetDcContextHandle, PULONG SockAddressCount, LPSOCKET_ADDRESS* SockAddresses, LPSTR* DnsHostName);
  DWORD          DsGetDcNextW(                      HANDLE GetDcContextHandle, PULONG SockAddressCount, LPSOCKET_ADDRESS* SockAddresses, LPWSTR* DnsHostName);
  DWORD          DsGetDcOpenA(                      LPCSTR DnsName, ULONG OptionFlags, LPCSTR SiteName, GUID* DomainGuid, LPCSTR DnsForestName, ULONG DcFlags, PHANDLE RetGetDcContext);
  DWORD          DsGetDcOpenW(                      LPCWSTR DnsName, ULONG OptionFlags, LPCWSTR SiteName, GUID* DomainGuid, LPCWSTR DnsForestName, ULONG DcFlags, PHANDLE RetGetDcContext);
  DWORD          DsGetDcSiteCoverageA(              LPCSTR ServerName, PULONG EntryCount, LPSTR** SiteNames);
  DWORD          DsGetDcSiteCoverageW(              LPCWSTR ServerName, PULONG EntryCount, LPWSTR** SiteNames);
  DWORD          DsGetForestTrustInformationW(      LPCWSTR ServerName, LPCWSTR TrustedDomainName, DWORD Flags, PLSA_FOREST_TRUST_INFORMATION* ForestTrustInfo);
  DWORD          DsGetSiteNameA(                    LPCSTR ComputerName, LPSTR* SiteName);
  DWORD          DsGetSiteNameW(                    LPCWSTR ComputerName, LPWSTR* SiteName);
  void           DsMergeForestTrustInformationW(    LPCWSTR DomainName, PLSA_FOREST_TRUST_INFORMATION NewForestTrustInfo, PLSA_FOREST_TRUST_INFORMATION OldForestTrustInfo, PLSA_FOREST_TRUST_INFORMATION* ForestTrustInfo);
  void           DsRoleFreeMemory(                  PVOID Buffer);
  DWORD          DsRoleGetPrimaryDomainInformation( LPCWSTR lpServer, DSROLE_PRIMARY_DOMAIN_INFO_LEVEL InfoLevel, PBYTE* Buffer);
  DWORD          DsValidateSubnetNameA(             LPCSTR SubnetName);
  DWORD          DsValidateSubnetNameW(             LPCWSTR SubnetName);
  NET_API_STATUS NetAlertRaise(                     LPCWSTR AlertEventName, LPVOID Buffer, DWORD BufferSize);
  NET_API_STATUS NetAlertRaiseEx(                   LPCWSTR AlertEventName, LPVOID VariableInfo, DWORD VariableInfoSize, LPCWSTR ServiceName);
  NET_API_STATUS NetApiBufferAllocate(              DWORD ByteCount, LPVOID* Buffer);
  NET_API_STATUS NetApiBufferFree(                  LPVOID Buffer);
  NET_API_STATUS NetApiBufferReallocate(            LPVOID OldBuffer, DWORD NewByteCount, LPVOID* NewBuffer);
  NET_API_STATUS NetApiBufferSize(                  LPVOID Buffer, LPDWORD ByteCount);
  NET_API_STATUS NetAddAlternateComputerName(       LPCWSTR Server, LPCWSTR AlternateName, LPCWSTR DomainAccount, LPCWSTR DomainAccountPassword, ULONG Reserved);
  NET_API_STATUS NetEnumerateComputerNames(         LPCWSTR Server, NET_COMPUTER_NAME_TYPE NameType, ULONG Reserved, PDWORD EntryCount, LPWSTR** ComputerNames);
  NET_API_STATUS NetGetJoinableOUs(                 LPCWSTR lpServer, LPCWSTR lpDomain, LPCWSTR lpAccount, LPCWSTR lpPassword, DWORD* OUCount, LPWSTR** OUs);
  NET_API_STATUS NetGetJoinInformation(             LPCWSTR lpServer, LPWSTR* lpNameBuffer, PNETSETUP_JOIN_STATUS BufferType);
  NET_API_STATUS NetJoinDomain(                     LPCWSTR lpServer, LPCWSTR lpDomain, LPCWSTR lpAccountOU, LPCWSTR lpAccount, LPCWSTR lpPassword, DWORD fJoinOptions);
  NET_API_STATUS NetLogonSetServiceBits(            LPWSTR ServerName, DWORD ServiceBitsOfInterest, DWORD ServiceBits);
  NET_API_STATUS NetProvisionComputerAccount(       LPCWSTR lpDomain, LPCWSTR lpMachineName, LPCWSTR lpMachineAccountOU, LPCWSTR lpDcName, DWORD dwOptions, PBYTE pProvisionBinData, DWORD pdwProvisionBinDataSize, LPWSTR pProvisionTextData);
  NET_API_STATUS NetRemoveAlternateComputerName(    LPCWSTR Server, LPCWSTR AlternateName, LPCWSTR DomainAccount, LPCWSTR DomainAccountPassword, ULONG Reserved);
  NET_API_STATUS NetRenameMachineInDomain(          LPCWSTR lpServer, LPCWSTR lpNewMachineName, LPCWSTR lpAccount, LPCWSTR lpPassword, DWORD fRenameOptions);
  NET_API_STATUS NetRequestOfflineDomainJoin(       BYTE* pProvisionBinData, DWORD cbProvisionBinDataSize, DWORD dwOptions, LPCWSTR lpWindowsPath);
  NET_API_STATUS NetSetPrimaryComputerName(         LPCWSTR Server, LPCWSTR PrimaryName, LPCWSTR DomainAccount, LPCWSTR DomainAccountPassword, ULONG Reserved);
  NET_API_STATUS NetUnjoinDomain(                   LPCWSTR lpServer, LPCWSTR lpAccount, LPCWSTR lpPassword, DWORD fUnjoinOptions);
  NET_API_STATUS NetValidateName(                   LPCWSTR lpServer, LPCWSTR lpName, LPCWSTR lpAccount, LPCWSTR lpPassword, NETSETUP_NAME_TYPE NameType);
  NET_API_STATUS NetGetAnyDCName(                   LPCWSTR servername, LPCWSTR domainname, LPBYTE* bufptr);
  NET_API_STATUS NetGetDCName(                      LPCWSTR servername, LPCWSTR domainname, LPBYTE* bufptr);
  NET_API_STATUS NetGetDisplayInformationIndex(     LPCWSTR ServerName, DWORD Level, LPCWSTR Prefix, LPDWORD Index);
  NET_API_STATUS NetQueryDisplayInformation(        LPCWSTR ServerName, DWORD Level, DWORD Index, DWORD EntriesRequested, DWORD PreferredMaximumLength, LPDWORD ReturnedEntryCount, PVOID* SortedBuffer);
  NET_API_STATUS NetGroupAdd(                       LPCWSTR servername, DWORD level, LPBYTE buf, LPDWORD parm_err);
  NET_API_STATUS NetGroupAddUser(                   LPCWSTR servername, LPCWSTR GroupName, LPCWSTR username);
  NET_API_STATUS NetGroupDel(                       LPCWSTR servername, LPCWSTR groupname);
  NET_API_STATUS NetGroupDelUser(                   LPCWSTR servername, LPCWSTR GroupName, LPCWSTR Username);
  NET_API_STATUS NetGroupEnum(                      LPCWSTR servername, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, PDWORD_PTR resume_handle);
  NET_API_STATUS NetGroupGetInfo(                   LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE* bufptr);
  NET_API_STATUS NetGroupGetUsers(                  LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, PDWORD_PTR ResumeHandle);
  NET_API_STATUS NetGroupSetInfo(                   LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE buf, LPDWORD parm_err);
  NET_API_STATUS NetGroupSetUsers(                  LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE buf, DWORD totalentries);
  NET_API_STATUS NetLocalGroupAdd(                  LPCWSTR servername, DWORD level, LPBYTE buf, LPDWORD parm_err);
  NET_API_STATUS NetLocalGroupAddMembers(           LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE buf, DWORD totalentries);
  NET_API_STATUS NetLocalGroupDel(                  LPCWSTR servername, LPCWSTR groupname);
  NET_API_STATUS NetLocalGroupDelMembers(           LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE buf, DWORD totalentries);
  NET_API_STATUS NetLocalGroupEnum(                 LPCWSTR servername, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, PDWORD_PTR resumehandle);
  NET_API_STATUS NetLocalGroupGetInfo(              LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE* bufptr);
  NET_API_STATUS NetLocalGroupGetMembers(           LPCWSTR servername, LPCWSTR localgroupname, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, PDWORD_PTR resumehandle);
  NET_API_STATUS NetLocalGroupSetInfo(              LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE buf, LPDWORD parm_err);
  NET_API_STATUS NetLocalGroupSetMembers(           LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE buf, DWORD totalentries);
  NET_API_STATUS NetMessageBufferSend(              LPCWSTR servername, LPCWSTR msgname, LPCWSTR fromname, LPBYTE buf, DWORD buflen);
  NET_API_STATUS NetMessageNameAdd(                 LPCWSTR servername, LPCWSTR msgname);
  NET_API_STATUS NetMessageNameDel(                 LPCWSTR servername, LPCWSTR msgname);
  NET_API_STATUS NetMessageNameEnum(                LPCWSTR servername, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resume_handle);
  NET_API_STATUS NetMessageNameGetInfo(             LPCWSTR servername, LPCWSTR msgname, DWORD level, LPBYTE* bufptr);
  NET_API_STATUS NetRemoteComputerSupports(         LPCWSTR UncServerName, DWORD OptionsWanted, LPDWORD OptionsSupported);
  NET_API_STATUS NetRemoteTOD(                      LPCWSTR UncServerName, LPBYTE* BufferPtr);
  NET_API_STATUS NetScheduleJobAdd(                 LPCWSTR Servername, LPBYTE Buffer, LPDWORD JobId);
  NET_API_STATUS NetScheduleJobDel(                 LPCWSTR Servername, DWORD MinJobId, DWORD MaxJobId);
  NET_API_STATUS NetScheduleJobEnum(                LPCWSTR Servername, LPBYTE* PointerToBuffer, DWORD PreferredMaximumLength, LPDWORD EntriesRead, LPDWORD TotalEntries, LPDWORD ResumeHandle);
  NET_API_STATUS NetScheduleJobGetInfo(             LPCWSTR Servername, DWORD JobId, LPBYTE* PointerToBuffer);
  NET_API_STATUS NetServerDiskEnum(                 LPWSTR servername, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resume_handle);
  NET_API_STATUS NetServerEnum(                     LPCWSTR servername, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, WINAPI_ServerType servertype, LPCWSTR domain, LPDWORD resume_handle);
  NET_API_STATUS NetServerGetInfo(                  LPWSTR servername, DWORD level, LPBYTE* bufptr);
  NET_API_STATUS NetServerSetInfo(                  LPWSTR servername, DWORD level, LPBYTE buf, LPDWORD ParmError);
  NET_API_STATUS NetServerComputerNameAdd(          LPWSTR ServerName, LPWSTR EmulatedDomainName, LPWSTR EmulatedServerName);
  NET_API_STATUS NetServerComputerNameDel(          LPWSTR ServerName, LPWSTR EmulatedServerName);
  NET_API_STATUS NetServerTransportAdd(             LPWSTR servername, DWORD level, LPBYTE bufptr);
  NET_API_STATUS NetServerTransportAddEx(           LPWSTR servername, DWORD level, LPBYTE bufptr);
  NET_API_STATUS NetServerTransportDel(             LPWSTR servername, DWORD level, LPBYTE bufptr);
  NET_API_STATUS NetServerTransportEnum(            LPWSTR servername, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resumehandle);
  NET_API_STATUS NetWkstaTransportEnum(             LPWSTR servername, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resumehandle);
  NET_API_STATUS NetUseAdd(                         LMSTR UncServerName, DWORD Level, LPBYTE Buf, LPDWORD ParmError);
  NET_API_STATUS NetUseDel(                         LMSTR UncServerName, LMSTR UseName, DWORD ForceCond);
  NET_API_STATUS NetUseEnum(                        LMSTR UncServerName, DWORD Level, LPBYTE* BufPtr, DWORD PreferedMaximumSize, LPDWORD EntriesRead, LPDWORD TotalEntries, LPDWORD ResumeHandle);
  NET_API_STATUS NetUseGetInfo(                     LMSTR UncServerName, LMSTR UseName, DWORD Level, LPBYTE* BufPtr);
  NET_API_STATUS NetUserAdd(                        LMSTR servername, DWORD level, LPBYTE buf, LPDWORD parm_err);
  NET_API_STATUS NetUserChangePassword(             LPCWSTR domainname, LPCWSTR username, LPCWSTR oldpassword, LPCWSTR newpassword);
  NET_API_STATUS NetUserDel(                        LPCWSTR servername, LPCWSTR username);
  NET_API_STATUS NetUserEnum(                       LPCWSTR servername, DWORD level, DWORD filter, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resume_handle);
  NET_API_STATUS NetUserGetGroups(                  LPCWSTR servername, LPCWSTR username, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries);
  NET_API_STATUS NetUserGetInfo(                    LPCWSTR servername, LPCWSTR username, DWORD level, LPBYTE* bufptr);
  NET_API_STATUS NetUserGetLocalGroups(             LPCWSTR servername, LPCWSTR username, DWORD level, WINAPI_NetUserGetLocalGroupsFlags flags, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries);
  NET_API_STATUS NetUserSetGroups(                  LPCWSTR servername, LPCWSTR username, DWORD level, LPBYTE buf, DWORD num_entries);
  NET_API_STATUS NetUserSetInfo(                    LPCWSTR servername, LPCWSTR username, DWORD level, LPBYTE buf, LPDWORD parm_err);
  NET_API_STATUS NetUserModalsGet(                  LPCWSTR servername, DWORD level, LPBYTE* bufptr);
  NET_API_STATUS NetUserModalsSet(                  LPCWSTR servername, DWORD level, LPBYTE buf, LPDWORD parm_err);
  NET_API_STATUS NetValidatePasswordPolicyFree(     LPVOID* OutputArg);
  NET_API_STATUS NetValidatePasswordPolicy(         LPCWSTR ServerName, LPVOID Qualifier, NET_VALIDATE_PASSWORD_TYPE ValidationType, LPVOID InputArg, LPVOID OutputArg);
  NET_API_STATUS NetWkstaGetInfo(                   LPWSTR servername, DWORD level, LPBYTE* bufptr);
  NET_API_STATUS NetWkstaSetInfo(                   LPWSTR servername, DWORD level, LPBYTE buffer, LPDWORD parm_err);
  NET_API_STATUS NetWkstaUserEnum(                  LPWSTR servername, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resumehandle);
  NET_API_STATUS NetWkstaUserGetInfo(               LPWSTR reserved, DWORD level, LPBYTE* bufptr);
  NET_API_STATUS NetWkstaUserSetInfo(               LPWSTR reserved, DWORD level, LPBYTE buf, LPDWORD parm_err);
  NTSTATUS       NetAddServiceAccount(              LPWSTR ServerName, LPWSTR AccountName, LPWSTR Reserved, DWORD Flags);
  NTSTATUS       NetEnumerateServiceAccounts(       LPWSTR ServerName, DWORD Flags, DWORD* AccountsCount, PZPWSTR* Accounts);
  NTSTATUS       NetIsServiceAccount(               LPWSTR ServerName, LPWSTR AccountName, BOOL* IsService);
  NTSTATUS       NetRemoveServiceAccount(           LPWSTR ServerName, LPWSTR AccountName, DWORD Flags);
  DWORD          DavAddConnection(                  HANDLE* ConnectionHandle, LPCWSTR RemoteName, LPCWSTR UserName, LPCWSTR Password, PBYTE ClientCert, DWORD CertSize);
  DWORD          DavDeleteConnection(               HANDLE ConnectionHandle);
  DWORD          DavFlushFile(                      HANDLE hFile);
  DWORD          DavGetExtendedError(               HANDLE hFile, DWORD* ExtError, LPWSTR ExtErrorString, DWORD* cChSize);
  DWORD          DavGetHTTPFromUNCPath(             LPCWSTR UncPath, LPWSTR HttpPath, LPDWORD lpSize);
  DWORD          DavGetUNCFromHTTPPath(             LPCWSTR HttpPath, LPWSTR UncPath, LPDWORD lpSize);
  NET_API_STATUS NetFileClose(                      LMSTR servername, DWORD fileid);
  NET_API_STATUS NetFileEnum(                       LMSTR servername, LMSTR basepath, LMSTR username, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, PDWORD_PTR resume_handle);
  NET_API_STATUS NetFileGetInfo(                    LMSTR servername, DWORD fileid, DWORD level, LPBYTE* bufptr);
  NET_API_STATUS NetSessionDel(                     LPWSTR servername, LPWSTR UncClientName, LPWSTR username);
  NET_API_STATUS NetSessionEnum(                    LPWSTR servername, LPWSTR UncClientName, LPWSTR username, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resume_handle);
  NET_API_STATUS NetSessionGetInfo(                 LPWSTR servername, LPWSTR UncClientName, LPWSTR username, DWORD level, LPBYTE* bufptr);
  NET_API_STATUS NetConnectionEnum(                 LMSTR servername, LMSTR qualifier, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resume_handle);
  NET_API_STATUS NetShareAdd(                       LPWSTR servername, DWORD level, LPBYTE buf, LPDWORD parm_err);
  NET_API_STATUS NetShareCheck(                     LPWSTR servername, LPWSTR device, LPDWORD type);
  NET_API_STATUS NetShareDel(                       LMSTR servername, LMSTR netname, DWORD reserved);
  NET_API_STATUS NetShareDelEx(                     LMSTR servername, DWORD level, LPBYTE buf);
  NET_API_STATUS NetShareEnum(                      LPWSTR servername, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resume_handle);
  NET_API_STATUS NetShareGetInfo(                   LPWSTR servername, LPWSTR netname, DWORD level, LPBYTE* bufptr);
  NET_API_STATUS NetShareSetInfo(                   LPWSTR servername, LPWSTR netname, DWORD level, LPBYTE buf, LPDWORD parm_err);
  NET_API_STATUS NetStatisticsGet(                  LPWSTR server, LPWSTR service, DWORD level, DWORD options, LPBYTE* bufptr);
]]
return ffi.load( 'Netapi32.dll' )
