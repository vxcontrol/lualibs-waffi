require( 'waffi.headers.windows' )
require( 'waffi.headers.registry' )
require( 'waffi.headers.shell' )
local ffi = require( 'ffi' )
ffi.cdef [[
  typedef HANDLE HUSKEY; //Alias
  typedef HUSKEY *PHUSKEY; //Pointer
  typedef WINAPI_ERROR_CODE LSTATUS; //Alias
  typedef void* IConnectionPoint; //Interface
  typedef void* IObjectWithSite; //Interface
  typedef void* IXMLDOMNode; //Interface
  typedef void* IPropertyBag; //Interface
  typedef UINT SHREGENUM_FLAGS; //Alias
  static const SHREGENUM_FLAGS SHREGENUM_DEFAULT = 0x00000000;
  static const SHREGENUM_FLAGS SHREGENUM_HKCU = 0x00000001;
  static const SHREGENUM_FLAGS SHREGENUM_HKLM = 0x00000010;
  static const SHREGENUM_FLAGS SHREGENUM_BOTH = 0x00000011;
  typedef UINT SHREGDEL_FLAGS; //Alias
  static const SHREGDEL_FLAGS SHREGDEL_DEFAULT = 0x00000000;
  static const SHREGDEL_FLAGS SHREGDEL_HKCU = 0x00000001;
  static const SHREGDEL_FLAGS SHREGDEL_HKLM = 0x00000010;
  static const SHREGDEL_FLAGS SHREGDEL_BOTH = 0x00000011;
  typedef UINT WINAPI_ShRegSetFlags; //Alias
  typedef DWORD SHCT_FLAGS; //Alias
  typedef UINT STIF_FLAGS; //Alias
  typedef UINT SFBS_FLAGS; //Alias
  typedef UINT SRRF; //Alias
  typedef struct QITAB {
    IID* piid;
    int dwOffset;
  } QITAB;
  typedef QITAB *LPCQITAB; //Pointer
  typedef UINT URLIS; //Alias
  static const URLIS URLIS_URL = 0;
  static const URLIS URLIS_OPAQUE = 1;
  static const URLIS URLIS_NOHISTORY = 2;
  static const URLIS URLIS_FILEURL = 3;
  static const URLIS URLIS_APPLIABLE = 4;
  static const URLIS URLIS_DIRECTORY = 5;
  static const URLIS URLIS_HASQUERY = 6;
  typedef UINT URL_SCHEME; //Alias
  static const URL_SCHEME URL_SCHEME_INVALID = -1;
  static const URL_SCHEME URL_SCHEME_UNKNOWN = 0;
  static const URL_SCHEME URL_SCHEME_FTP = 1;
  static const URL_SCHEME URL_SCHEME_HTTP = 2;
  static const URL_SCHEME URL_SCHEME_GOPHER = 3;
  static const URL_SCHEME URL_SCHEME_MAILTO = 4;
  static const URL_SCHEME URL_SCHEME_NEWS = 5;
  static const URL_SCHEME URL_SCHEME_NNTP = 6;
  static const URL_SCHEME URL_SCHEME_TELNET = 7;
  static const URL_SCHEME URL_SCHEME_WAIS = 8;
  static const URL_SCHEME URL_SCHEME_FILE = 9;
  static const URL_SCHEME URL_SCHEME_MK = 10;
  static const URL_SCHEME URL_SCHEME_HTTPS = 11;
  static const URL_SCHEME URL_SCHEME_SHELL = 12;
  static const URL_SCHEME URL_SCHEME_SNEWS = 13;
  static const URL_SCHEME URL_SCHEME_LOCAL = 14;
  static const URL_SCHEME URL_SCHEME_JAVASCRIPT = 15;
  static const URL_SCHEME URL_SCHEME_VBSCRIPT = 16;
  static const URL_SCHEME URL_SCHEME_ABOUT = 17;
  static const URL_SCHEME URL_SCHEME_RES = 18;
  static const URL_SCHEME URL_SCHEME_MSSHELLROOTED = 19;
  static const URL_SCHEME URL_SCHEME_MSSHELLIDLIST = 20;
  static const URL_SCHEME URL_SCHEME_MSHELP = 21;
  static const URL_SCHEME URL_SCHEME_MSSHELLDEVICE = 22;
  static const URL_SCHEME URL_SCHEME_WILDCARD = 23;
  static const URL_SCHEME URL_SCHEME_SEARCH_MS = 24;
  static const URL_SCHEME URL_SCHEME_SEARCH = 25;
  static const URL_SCHEME URL_SCHEME_KNOWNFOLDER = 26;
  static const URL_SCHEME URL_SCHEME_MAXVALUE = 27;
  typedef struct PARSEDURLA {
    DWORD cbSize;
    LPCSTR pszProtocol;
    UINT cchProtocol;
    LPCSTR pszSuffix;
    UINT cchSuffix;
    URL_SCHEME nScheme;
  } PARSEDURLA;
  typedef struct PARSEDURLW {
    DWORD cbSize;
    LPCWSTR pszProtocol;
    UINT cchProtocol;
    LPCWSTR pszSuffix;
    UINT cchSuffix;
    URL_SCHEME nScheme;
  } PARSEDURLW;
  typedef UINT SHGLOBALCOUNTER; //Alias
  static const SHGLOBALCOUNTER GLOBALCOUNTER_SEARCHMANAGER = 0;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_SEARCHOPTIONS = 1;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_FOLDERSETTINGSCHANGE = 2;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RATINGS = 3;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_APPROVEDSITES = 4;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RESTRICTIONS = 5;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_SHELLSETTINGSCHANGED = 6;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_SYSTEMPIDLCHANGE = 7;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_OVERLAYMANAGER = 8;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_QUERYASSOCIATIONS = 9;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_IESESSIONS = 10;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_IEONLY_SESSIONS = 11;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_APPLICATION_DESTINATIONS = 12;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_CSCSYNCINPROGRESS = 13;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_BITBUCKETNUMDELETERS = 14;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SHARES = 15;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_A = 16;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_B = 17;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_C = 18;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_D = 19;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_E = 20;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_F = 21;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_G = 22;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_H = 23;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_I = 24;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_J = 25;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_K = 26;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_L = 27;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_M = 28;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_N = 29;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_O = 30;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_P = 31;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Q = 32;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_R = 33;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_S = 34;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_T = 35;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_U = 36;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_V = 37;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_W = 38;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_X = 39;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Y = 40;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Z = 41;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SERVERDRIVE = 42;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEGLOBALDIRTYCOUNT = 43;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEBINENUM = 44;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RECYCLEBINCORRUPTED = 45;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_RATINGS_STATECOUNTER = 46;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_PRIVATE_PROFILE_CACHE = 47;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_INTERNETTOOLBAR_LAYOUT = 48;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_FOLDERDEFINITION_CACHE = 49;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_COMMONPLACES_LIST_CACHE = 50;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_PRIVATE_PROFILE_CACHE_MACHINEWIDE = 51;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_ASSOCCHANGED = 52;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_APP_ITEMS_STATE_STORE_CACHE = 53;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_IMMERSIVE_SCALE_CACHE = 54;
  static const SHGLOBALCOUNTER GLOBALCOUNTER_SETTINGSYNC_ENABLED = 55;
  HANDLE                  SHAllocShared(                       const void* pvData, DWORD dwSize, DWORD dwDestinationProcessId);
  WINAPI_MessageBoxResult ShellMessageBoxA(                    HINSTANCE hInst, HWND hWnd, LPCSTR pszMsg, LPCSTR pszTitle, WINAPI_MessageBoxType fuStyle);
  WINAPI_MessageBoxResult ShellMessageBoxW(                    HINSTANCE hInst, HWND hWnd, LPCWSTR pszMsg, LPCWSTR pszTitle, WINAPI_MessageBoxType fuStyle);
  HRESULT                 SHGetViewStatePropertyBag(           PCIDLIST_ABSOLUTE pidl, LPCWSTR pszBagName, DWORD dwFlags, REFIID riid, void** ppv);
  LPVOID                  SHLockShared(                        HANDLE* hData, DWORD dwOtherProcId);
  BOOL                    SHUnlockShared(                      void* pvData);
  BOOL                    SHFreeShared(                        HANDLE hData, DWORD dwSourceProcId);
  LPCWSTR                 StrStrNW(                            LPCWSTR lpFirst, LPCWSTR lpSrch, UINT cchMax);
  LPCWSTR                 StrStrNIW(                           LPCWSTR lpFirst, LPCWSTR lpSrch, UINT cchMax);
  COLORREF                ColorAdjustLuma(                     COLORREF clrRGB, int n, BOOL fScale);
  COLORREF                ColorHLSToRGB(                       WORD wHue, WORD wLuminance, WORD wSaturation);
  void                    ColorRGBToHLS(                       COLORREF clrRGB, WORD* pwHue, WORD* pwLuminance, WORD* pwSaturation);
  HPALETTE                SHCreateShellPalette(                HDC hdc);
  HRESULT                 SHGetInverseCMAP(                    BYTE* pbMap, ULONG cbMap);
  LPSTR                   PathAddBackslashA(                   LPSTR lpszPath);
  LPWSTR                  PathAddBackslashW(                   LPWSTR lpszPath);
  BOOL                    PathAddExtensionA(                   LPSTR pszPath, LPCSTR pszExtension);
  BOOL                    PathAddExtensionW(                   LPWSTR pszPath, LPCWSTR pszExtension);
  BOOL                    PathAppendA(                         LPSTR pszPath, LPCSTR pszMore);
  BOOL                    PathAppendW(                         LPWSTR pszPath, LPCWSTR pszMore);
  LPSTR                   PathBuildRootA(                      LPSTR szRoot, int iDrive);
  LPWSTR                  PathBuildRootW(                      LPWSTR szRoot, int iDrive);
  BOOL                    PathCanonicalizeA(                   LPSTR lpszDst, LPCSTR lpszSrc);
  BOOL                    PathCanonicalizeW(                   LPWSTR lpszDst, LPCWSTR lpszSrc);
  LPSTR                   PathCombineA(                        LPSTR lpszDest, LPCSTR lpszDir, LPCSTR lpszFile);
  LPWSTR                  PathCombineW(                        LPWSTR lpszDest, LPCWSTR lpszDir, LPCWSTR lpszFile);
  int                     PathCommonPrefixA(                   LPCSTR pszFile1, LPCSTR pszFile2, LPSTR pszPath);
  int                     PathCommonPrefixW(                   LPCWSTR pszFile1, LPCWSTR pszFile2, LPWSTR pszPath);
  BOOL                    PathCompactPathA(                    HDC hDC, LPSTR lpszPath, UINT dx);
  BOOL                    PathCompactPathW(                    HDC hDC, LPWSTR lpszPath, UINT dx);
  BOOL                    PathCompactPathExA(                  LPSTR pszOut, LPCSTR pszSrc, UINT cchMax, DWORD dwFlags);
  BOOL                    PathCompactPathExW(                  LPWSTR pszOut, LPCWSTR pszSrc, UINT cchMax, DWORD dwFlags);
  HRESULT                 PathCreateFromUrlA(                  PCSTR pszUrl, PSTR pszPath, DWORD* pcchPath, DWORD dwFlags);
  HRESULT                 PathCreateFromUrlW(                  PCWSTR pszUrl, PWSTR pszPath, DWORD* pcchPath, DWORD dwFlags);
  HRESULT                 PathCreateFromUrlAlloc(              PCWSTR pszIn, PWSTR* ppszOut, DWORD dwFlags);
  BOOL                    PathFileExistsA(                     LPCSTR pszPath);
  BOOL                    PathFileExistsW(                     LPCWSTR pszPath);
  PSTR                    PathFindExtensionA(                  PSTR pszPath);
  PWSTR                   PathFindExtensionW(                  PWSTR pszPath);
  PSTR                    PathFindFileNameA(                   PSTR pPath);
  PWSTR                   PathFindFileNameW(                   PWSTR pPath);
  PSTR                    PathFindNextComponentA(              PSTR pszPath);
  PWSTR                   PathFindNextComponentW(              PWSTR pszPath);
  BOOL                    PathFindOnPathA(                     LPSTR pszFile, LPCSTR* ppszOtherDirs);
  BOOL                    PathFindOnPathW(                     LPWSTR pszFile, LPCWSTR* ppszOtherDirs);
  LPCSTR                  PathFindSuffixArrayA(                LPCSTR pszPath, const LPCSTR* apszSuffix, int iArraySize);
  LPCWSTR                 PathFindSuffixArrayW(                LPCWSTR pszPath, const LPCWSTR* apszSuffix, int iArraySize);
  PSTR                    PathGetArgsA(                        PSTR pszPath);
  PWSTR                   PathGetArgsW(                        PWSTR pszPath);
  UINT                    PathGetCharTypeA(                    UCHAR ch);
  UINT                    PathGetCharTypeW(                    WCHAR ch);
  int                     PathGetDriveNumberA(                 LPCSTR lpsz);
  int                     PathGetDriveNumberW(                 LPCWSTR lpsz);
  BOOL                    PathIsContentTypeA(                  LPCSTR pszPath, LPCSTR pszContentType);
  BOOL                    PathIsContentTypeW(                  LPCWSTR pszPath, LPCWSTR pszContentType);
  BOOL                    PathIsDirectoryA(                    LPCSTR pszPath);
  BOOL                    PathIsDirectoryW(                    LPCWSTR pszPath);
  BOOL                    PathIsDirectoryEmptyA(               LPCSTR pszPath);
  BOOL                    PathIsDirectoryEmptyW(               LPCWSTR pszPath);
  BOOL                    PathIsFileSpecA(                     LPCSTR lpszPath);
  BOOL                    PathIsFileSpecW(                     LPCWSTR lpszPath);
  BOOL                    PathIsHTMLFileA(                     LPCSTR pszFile);
  BOOL                    PathIsHTMLFileW(                     LPCWSTR pszFile);
  BOOL                    PathIsLFNFileSpecA(                  LPCSTR pszName);
  BOOL                    PathIsLFNFileSpecW(                  LPCWSTR pszName);
  BOOL                    PathIsNetworkPathA(                  LPCSTR pszPath);
  BOOL                    PathIsNetworkPathW(                  LPCWSTR pszPath);
  BOOL                    PathIsPrefixA(                       LPCSTR pszPrefix, LPCSTR pszPath);
  BOOL                    PathIsPrefixW(                       LPCWSTR pszPrefix, LPCWSTR pszPath);
  BOOL                    PathIsRelativeA(                     LPCSTR lpszPath);
  BOOL                    PathIsRelativeW(                     LPCWSTR lpszPath);
  BOOL                    PathIsRootA(                         LPCSTR pPath);
  BOOL                    PathIsRootW(                         LPCWSTR pPath);
  BOOL                    PathIsSameRootA(                     LPCSTR pszPath1, LPCSTR pszPath2);
  BOOL                    PathIsSameRootW(                     LPCWSTR pszPath1, LPCWSTR pszPath2);
  BOOL                    PathIsSystemFolderA(                 LPCSTR pszPath, DWORD dwAttrb);
  BOOL                    PathIsSystemFolderW(                 LPCWSTR pszPath, DWORD dwAttrb);
  BOOL                    PathIsUNCA(                          LPCSTR pszPath);
  BOOL                    PathIsUNCW(                          LPCWSTR pszPath);
  BOOL                    PathIsUNCServerA(                    LPCSTR pszPath);
  BOOL                    PathIsUNCServerW(                    LPCWSTR pszPath);
  BOOL                    PathIsUNCServerShareA(               LPCSTR pszPath);
  BOOL                    PathIsUNCServerShareW(               LPCWSTR pszPath);
  BOOL                    PathIsURLA(                          LPCSTR pszPath);
  BOOL                    PathIsURLW(                          LPCWSTR pszPath);
  BOOL                    PathMakePrettyA(                     LPSTR lpPath);
  BOOL                    PathMakePrettyW(                     LPWSTR lpPath);
  BOOL                    PathMakeSystemFolderA(               LPSTR pszPath);
  BOOL                    PathMakeSystemFolderW(               LPWSTR pszPath);
  BOOL                    PathMatchSpecA(                      LPCSTR pszFile, LPCSTR pszSpec);
  BOOL                    PathMatchSpecW(                      LPCWSTR pszFile, LPCWSTR pszSpec);
  HRESULT                 PathMatchSpecExA(                    LPCSTR pszFile, LPCSTR pszSpec, DWORD dwFlags);
  HRESULT                 PathMatchSpecExW(                    LPCWSTR pszFile, LPCWSTR pszSpec, DWORD dwFlags);
  int                     PathParseIconLocationA(              LPSTR pszIconFile);
  int                     PathParseIconLocationW(              LPWSTR pszIconFile);
  BOOL                    PathQuoteSpacesA(                    LPSTR lpsz);
  BOOL                    PathQuoteSpacesW(                    LPWSTR lpsz);
  BOOL                    PathRelativePathToA(                 LPSTR pszPath, LPCSTR pszFrom, DWORD dwAttrFrom, LPCSTR pszTo, DWORD dwAttrTo);
  BOOL                    PathRelativePathToW(                 LPWSTR pszPath, LPCWSTR pszFrom, DWORD dwAttrFrom, LPCWSTR pszTo, DWORD dwAttrTo);
  void                    PathRemoveArgsA(                     LPSTR pszPath);
  void                    PathRemoveArgsW(                     LPWSTR pszPath);
  LPSTR                   PathRemoveBackslashA(                LPSTR lpszPath);
  LPWSTR                  PathRemoveBackslashW(                LPWSTR lpszPath);
  void                    PathRemoveBlanksA(                   LPSTR lpszString);
  void                    PathRemoveBlanksW(                   LPWSTR lpszString);
  void                    PathRemoveExtensionA(                LPSTR pszPath);
  void                    PathRemoveExtensionW(                LPWSTR pszPath);
  BOOL                    PathRemoveFileSpecA(                 LPSTR pszPath);
  BOOL                    PathRemoveFileSpecW(                 LPWSTR pszPath);
  BOOL                    PathRenameExtensionA(                LPSTR pszPath, LPCSTR pszExt);
  BOOL                    PathRenameExtensionW(                LPWSTR pszPath, LPCWSTR pszExt);
  BOOL                    PathSearchAndQualifyA(               LPCSTR pcszPath, LPSTR pszFullyQualifiedPath, UINT cchFullyQualifiedPath);
  BOOL                    PathSearchAndQualifyW(               LPCWSTR pcszPath, LPWSTR pszFullyQualifiedPath, UINT cchFullyQualifiedPath);
  void                    PathSetDlgItemPath(                  HWND hDlg, int id, LPCSTR pszPath);
  PSTR                    PathSkipRootA(                       PSTR pszPath);
  PWSTR                   PathSkipRootW(                       PWSTR pszPath);
  void                    PathStripPathA(                      LPSTR pszPath);
  void                    PathStripPathW(                      LPWSTR pszPath);
  BOOL                    PathStripToRootA(                    LPSTR szRoot);
  BOOL                    PathStripToRootW(                    LPWSTR szRoot);
  void                    PathUndecorateA(                     LPSTR pszPath);
  void                    PathUndecorateW(                     LPWSTR pszPath);
  BOOL                    PathUnExpandEnvStringsA(             LPCSTR pszPath, LPWSTR pszBuf, UINT cchBuf);
  BOOL                    PathUnExpandEnvStringsW(             LPCWSTR pszPath, LPWSTR pszBuf, UINT cchBuf);
  BOOL                    PathUnmakeSystemFolderA(             LPSTR pszPath);
  BOOL                    PathUnmakeSystemFolderW(             LPWSTR pszPath);
  void                    PathUnquoteSpacesA(                  LPSTR lpsz);
  void                    PathUnquoteSpacesW(                  LPWSTR lpsz);
  BOOL                    SHSkipJunction(                      IBindCtx* pbc, const CLSID* pclsid);
  HRESULT                 UrlApplySchemeA(                     PCSTR pszIn, PSTR pszOut, DWORD* pcchOut, DWORD dwFlags);
  HRESULT                 UrlApplySchemeW(                     PCWSTR pszIn, PWSTR pszOut, DWORD* pcchOut, DWORD dwFlags);
  HRESULT                 UrlCanonicalizeA(                    PCSTR pszUrl, PWSTR pszCanonicalized, DWORD* pcchCanonicalized, DWORD dwFlags);
  HRESULT                 UrlCanonicalizeW(                    PCWSTR pszUrl, PWSTR pszCanonicalized, DWORD* pcchCanonicalized, DWORD dwFlags);
  HRESULT                 UrlCombineA(                         PCSTR pszBase, PCSTR pszRelative, PSTR pszCombined, DWORD* pcchCombined, DWORD dwFlags);
  HRESULT                 UrlCombineW(                         PCWSTR pszBase, PCWSTR pszRelative, PWSTR pszCombined, DWORD* pcchCombined, DWORD dwFlags);
  int                     UrlCompareA(                         PCSTR psz1, PCSTR psz2, BOOL fIgnoreSlash);
  int                     UrlCompareW(                         PCWSTR psz1, PCWSTR psz2, BOOL fIgnoreSlash);
  HRESULT                 UrlCreateFromPathA(                  PCSTR pszPath, PSTR pszUrl, DWORD* pcchUrl, DWORD dwFlags);
  HRESULT                 UrlCreateFromPathW(                  PCWSTR pszPath, PWSTR pszUrl, DWORD* pcchUrl, DWORD dwFlags);
  HRESULT                 UrlEscapeA(                          PCSTR pszURL, PSTR pszEscaped, DWORD* pcchEscaped, DWORD dwFlags);
  HRESULT                 UrlEscapeW(                          PCWSTR pszURL, PWSTR pszEscaped, DWORD* pcchEscaped, DWORD dwFlags);
  HRESULT                 UrlEscapeSpacesA(                    LPCSTR pszURL, LPWSTR pszEscaped, LPDWORD pcchEscaped);
  HRESULT                 UrlEscapeSpacesW(                    LPCWSTR pszURL, LPWSTR pszEscaped, LPDWORD pcchEscaped);
  HRESULT                 UrlFixupW(                           PCWSTR pcszUrl, PWSTR pszTranslatedUrl, DWORD cchMax);
  LPCSTR                  UrlGetLocationA(                     PCSTR pszURL);
  LPCWSTR                 UrlGetLocationW(                     PCWSTR pszURL);
  HRESULT                 UrlGetPartA(                         PCSTR pszIn, PSTR pszOut, DWORD* pcchOut, DWORD dwPart, DWORD dwFlags);
  HRESULT                 UrlGetPartW(                         PCWSTR pszIn, PWSTR pszOut, DWORD* pcchOut, DWORD dwPart, DWORD dwFlags);
  HRESULT                 UrlHashA(                            PCSTR pszURL, BYTE* pbHash, DWORD cbHash);
  HRESULT                 UrlHashW(                            PCWSTR pszURL, BYTE* pbHash, DWORD cbHash);
  BOOL                    UrlIsA(                              PCSTR pszUrl, URLIS UrlIs);
  BOOL                    UrlIsW(                              PCWSTR pszUrl, URLIS UrlIs);
  BOOL                    UrlIsFileUrlA(                       LPCSTR pszUrl);
  BOOL                    UrlIsFileUrlW(                       LPCWSTR pszUrl);
  BOOL                    UrlIsNoHistoryA(                     PCSTR pszURL);
  BOOL                    UrlIsNoHistoryW(                     PCWSTR pszURL);
  BOOL                    UrlIsOpaqueA(                        PCSTR pszURL);
  BOOL                    UrlIsOpaqueW(                        PCWSTR pszURL);
  HRESULT                 UrlUnescapeA(                        PSTR pszURL, PSTR pszUnescaped, DWORD* pcchUnescaped, DWORD dwFlags);
  HRESULT                 UrlUnescapeW(                        PWSTR pszURL, PWSTR pszUnescaped, DWORD* pcchUnescaped, DWORD dwFlags);
  HRESULT                 UrlUnescapeInPlaceA(                 LPSTR pszURL, DWORD dwFlags);
  HRESULT                 UrlUnescapeInPlaceW(                 LPWSTR pszURL, DWORD dwFlags);
  HRESULT                 AssocCreate(                         CLSID clsid, REFIID riid, void** ppv);
  HRESULT                 AssocGetPerceivedType(               PCWSTR pszExt, PERCEIVED* ptype, PERCEIVEDFLAG* pflag, PWSTR* ppszType);
  BOOL                    AssocIsDangerous(                    PCWSTR pszAssoc);
  HRESULT                 AssocQueryKeyA(                      ASSOCF flags, ASSOCKEY key, LPCSTR pszAssoc, LPCSTR pszExtra, HKEY* phkeyOut);
  HRESULT                 AssocQueryKeyW(                      ASSOCF flags, ASSOCKEY key, LPCWSTR pszAssoc, LPCWSTR pszExtra, HKEY* phkeyOut);
  HRESULT                 AssocQueryStringA(                   ASSOCF flags, ASSOCSTR str, LPCSTR pszAssoc, LPCSTR pszExtra, LPSTR pszOut, DWORD* pcchOut);
  HRESULT                 AssocQueryStringW(                   ASSOCF flags, ASSOCSTR str, LPCWSTR pszAssoc, LPCWSTR pszExtra, LPWSTR pszOut, DWORD* pcchOut);
  HRESULT                 AssocQueryStringByKeyA(              ASSOCF flags, ASSOCSTR str, HKEY hkAssoc, LPCSTR pszExtra, LPSTR pszOut, DWORD* pcchOut);
  HRESULT                 AssocQueryStringByKeyW(              ASSOCF flags, ASSOCSTR str, HKEY hkAssoc, LPCWSTR pszExtra, LPWSTR pszOut, DWORD* pcchOut);
  LSTATUS                 SHCopyKeyA(                          HKEY hkeySrc, LPCSTR pszSrcSubKey, HKEY hkeyDest, DWORD fReserved);
  LSTATUS                 SHCopyKeyW(                          HKEY hkeySrc, LPCWSTR pszSrcSubKey, HKEY hkeyDest, DWORD fReserved);
  LSTATUS                 SHDeleteEmptyKeyA(                   HKEY hkey, LPCSTR pszSubKey);
  LSTATUS                 SHDeleteEmptyKeyW(                   HKEY hkey, LPCWSTR pszSubKey);
  LSTATUS                 SHDeleteKeyA(                        HKEY hkey, LPCSTR pszSubKey);
  LSTATUS                 SHDeleteKeyW(                        HKEY hkey, LPCWSTR pszSubKey);
  LSTATUS                 SHDeleteValueA(                      HKEY hkey, LPCSTR pszSubKey, LPCSTR pszValue);
  LSTATUS                 SHDeleteValueW(                      HKEY hkey, LPCWSTR pszSubKey, LPCWSTR pszValue);
  LSTATUS                 SHEnumKeyExA(                        HKEY hkey, DWORD dwIndex, LPSTR pszName, LPDWORD pcchName);
  LSTATUS                 SHEnumKeyExW(                        HKEY hkey, DWORD dwIndex, LPWSTR pszName, LPDWORD pcchName);
  LSTATUS                 SHEnumValueA(                        HKEY hkey, DWORD dwIndex, LPSTR pszValueName, LPDWORD pcchValueName, WINAPI_RegType* pdwType, LPVOID pvData, LPDWORD pcbData);
  LSTATUS                 SHEnumValueW(                        HKEY hkey, DWORD dwIndex, LPWSTR pszValueName, LPDWORD pcchValueName, WINAPI_RegType* pdwType, LPVOID pvData, LPDWORD pcbData);
  LSTATUS                 SHGetValueA(                         HKEY hkey, LPCSTR pszSubKey, LPCSTR pszValue, WINAPI_RegType* pdwType, LPVOID pvData, LPDWORD pcbData);
  LSTATUS                 SHGetValueW(                         HKEY hkey, LPCWSTR pszSubKey, LPCWSTR pszValue, WINAPI_RegType* pdwType, LPVOID pvData, LPDWORD pcbData);
  IStream*                SHOpenRegStreamA(                    HKEY hkey, LPCSTR pszSubkey, LPCSTR pszValue, WINAPI_STGM_FLAGS grfMode);
  IStream*                SHOpenRegStreamW(                    HKEY hkey, LPCWSTR pszSubkey, LPCWSTR pszValue, WINAPI_STGM_FLAGS grfMode);
  IStream*                SHOpenRegStream2A(                   HKEY hkey, LPCSTR pszSubkey, LPCSTR pszValue, WINAPI_STGM_FLAGS grfMode);
  IStream*                SHOpenRegStream2W(                   HKEY hkey, LPCWSTR pszSubkey, LPCWSTR pszValue, WINAPI_STGM_FLAGS grfMode);
  LSTATUS                 SHQueryInfoKeyA(                     HKEY hkey, LPDWORD pcSubKeys, LPDWORD pcchMaxSubKeyLen, LPDWORD pcValues, LPDWORD pcchMaxValueNameLen);
  LSTATUS                 SHQueryInfoKeyW(                     HKEY hkey, LPDWORD pcSubKeys, LPDWORD pcchMaxSubKeyLen, LPDWORD pcValues, LPDWORD pcchMaxValueNameLen);
  WINAPI_ERROR_CODE       SHQueryValueExA(                     HKEY hkey, LPCSTR pszValue, LPDWORD pdwReserved, WINAPI_RegType* pdwType, LPVOID pvData, LPDWORD pcbData);
  WINAPI_ERROR_CODE       SHQueryValueExW(                     HKEY hkey, LPCWSTR pszValue, LPDWORD pdwReserved, WINAPI_RegType* pdwType, LPVOID pvData, LPDWORD pcbData);
  LSTATUS                 SHRegCloseUSKey(                     HUSKEY hUSKey);
  LSTATUS                 SHRegCreateUSKeyA(                   LPCSTR pszPath, REGSAM samDesired, HUSKEY hRelativeUSKey, PHUSKEY phNewUSKey, WINAPI_ShRegSetFlags dwFlags);
  LSTATUS                 SHRegCreateUSKeyW(                   LPCWSTR pszPath, REGSAM samDesired, HUSKEY hRelativeUSKey, PHUSKEY phNewUSKey, WINAPI_ShRegSetFlags dwFlags);
  LSTATUS                 SHRegDeleteEmptyUSKey(               HUSKEY hUSKey, LPCSTR pszValue, SHREGDEL_FLAGS delRegFlags);
  LSTATUS                 SHRegDeleteUSValueA(                 HUSKEY hUSKey, LPCSTR pszValue, SHREGDEL_FLAGS delRegFlags);
  LSTATUS                 SHRegDeleteUSValueW(                 HUSKEY hUSKey, LPCWSTR pszValue, SHREGDEL_FLAGS delRegFlags);
  HKEY                    SHRegDuplicateHKey(                  HKEY hkey);
  LSTATUS                 SHRegEnumUSKeyA(                     HUSKEY hUSKey, DWORD dwIndex, LPSTR pszName, LPDWORD pcchName, SHREGENUM_FLAGS enumRegFlags);
  LSTATUS                 SHRegEnumUSKeyW(                     HUSKEY hUSKey, DWORD dwIndex, LPWSTR pszName, LPDWORD pcchName, SHREGENUM_FLAGS enumRegFlags);
  LSTATUS                 SHRegEnumUSValueA(                   HUSKEY hUSKey, DWORD dwIndex, LPSTR pszValueName, LPDWORD pcchValueNameLen, WINAPI_RegType* pdwType, void* pvData, LPDWORD pcbData, SHREGENUM_FLAGS enumRegFlags);
  LSTATUS                 SHRegEnumUSValueW(                   HUSKEY hUSKey, DWORD dwIndex, LPWSTR pszValueName, LPDWORD pcchValueNameLen, WINAPI_RegType* pdwType, void* pvData, LPDWORD pcbData, SHREGENUM_FLAGS enumRegFlags);
  BOOL                    SHRegGetBoolUSValueA(                LPCSTR pszSubKey, LPCSTR pszValue, BOOL fIgnoreHKCU, BOOL fDefault);
  BOOL                    SHRegGetBoolUSValueW(                LPCWSTR pszSubKey, LPCWSTR pszValue, BOOL fIgnoreHKCU, BOOL fDefault);
  int                     SHRegGetIntW(                        HKEY hk, LPCWSTR szKey, int nDefault);
  LSTATUS                 SHRegGetPathA(                       HKEY hkey, LPCSTR pszSubkey, LPCSTR pszValue, LPSTR pszPath, DWORD dwFlags);
  LSTATUS                 SHRegGetPathW(                       HKEY hkey, LPCWSTR pszSubkey, LPCWSTR pszValue, LPWSTR pszPath, DWORD dwFlags);
  LSTATUS                 SHRegGetUSValueA(                    LPCSTR pszSubKey, LPCSTR pszValue, DWORD* pdwType, void* pvData, DWORD* pcbData, BOOL fIgnoreHKCU, void* pvDefaultData, DWORD dwDefaultDataSize);
  LSTATUS                 SHRegGetUSValueW(                    LPCWSTR pszSubKey, LPCWSTR pszValue, DWORD* pdwType, void* pvData, DWORD* pcbData, BOOL fIgnoreHKCU, void* pvDefaultData, DWORD dwDefaultDataSize);
  LSTATUS                 SHRegGetValueA(                      HKEY hkey, LPCSTR pszSubKey, LPCSTR pszValue, SRRF srrfFlags, LPDWORD pdwType, LPVOID pvData, LPDWORD pcbData);
  LSTATUS                 SHRegGetValueW(                      HKEY hkey, LPCWSTR pszSubKey, LPCWSTR pszValue, SRRF srrfFlags, LPDWORD pdwType, LPVOID pvData, LPDWORD pcbData);
  LSTATUS                 SHRegOpenUSKeyA(                     LPCSTR pszPath, REGSAM samDesired, HUSKEY hRelativeUSKey, PHUSKEY phNewUSKey, BOOL fIgnoreHKCU);
  LSTATUS                 SHRegOpenUSKeyW(                     LPCWSTR pszPath, REGSAM samDesired, HUSKEY hRelativeUSKey, PHUSKEY phNewUSKey, BOOL fIgnoreHKCU);
  LSTATUS                 SHRegQueryInfoUSKeyA(                HUSKEY hUSKey, LPDWORD pcSubKeys, LPDWORD pcchMaxSubKeyLen, LPDWORD pcValues, LPDWORD pcchMaxValueNameLen, SHREGENUM_FLAGS enumRegFlags);
  LSTATUS                 SHRegQueryInfoUSKeyW(                HUSKEY hUSKey, LPDWORD pcSubKeys, LPDWORD pcchMaxSubKeyLen, LPDWORD pcValues, LPDWORD pcchMaxValueNameLen, SHREGENUM_FLAGS enumRegFlags);
  LSTATUS                 SHRegQueryUSValueA(                  HUSKEY hUSKey, LPCSTR pszValue, WINAPI_RegType* pdwType, LPVOID pvData, LPDWORD pcbData, BOOL fIgnoreHKCU, LPVOID pvDefaultData, DWORD dwDefaultDataSize);
  LSTATUS                 SHRegQueryUSValueW(                  HUSKEY hUSKey, LPCWSTR pszValue, WINAPI_RegType* pdwType, LPVOID pvData, LPDWORD pcbData, BOOL fIgnoreHKCU, LPVOID pvDefaultData, DWORD dwDefaultDataSize);
  LSTATUS                 SHRegSetPathA(                       HKEY hkey, LPCSTR pszSubkey, LPCSTR pszValue, LPCSTR pszPath, DWORD dwFlags);
  LSTATUS                 SHRegSetPathW(                       HKEY hkey, LPCWSTR pszSubkey, LPCWSTR pszValue, LPCWSTR pszPath, DWORD dwFlags);
  LSTATUS                 SHRegSetUSValueA(                    LPCSTR pszSubKey, LPCSTR pszValue, DWORD dwType, LPVOID pvData, DWORD cbData, DWORD dwFlags);
  LSTATUS                 SHRegSetUSValueW(                    LPCWSTR pszSubKey, LPCWSTR pszValue, DWORD dwType, LPVOID pvData, DWORD cbData, DWORD dwFlags);
  LSTATUS                 SHRegSetValueA(                      HKEY hkey, LPCSTR pszSubKey, LPCSTR pszValue, SRRF srrfFlags, DWORD dwType, LPCVOID pvData, DWORD cbData);
  LSTATUS                 SHRegSetValueW(                      HKEY hkey, LPCWSTR pszSubKey, LPCWSTR pszValue, SRRF srrfFlags, DWORD dwType, LPCVOID pvData, DWORD cbData);
  LSTATUS                 SHRegWriteUSValueA(                  HUSKEY hUSKey, LPCSTR pszValue, DWORD dwType, LPVOID pvData, DWORD cbData, DWORD dwFlags);
  LSTATUS                 SHRegWriteUSValueW(                  HUSKEY hUSKey, LPCWSTR pszValue, DWORD dwType, LPVOID pvData, DWORD cbData, DWORD dwFlags);
  LSTATUS                 SHSetValueA(                         HKEY hkey, LPCSTR pszSubKey, LPCSTR pszValue, WINAPI_RegType dwType, LPCVOID pvData, DWORD cbData);
  LSTATUS                 SHSetValueW(                         HKEY hkey, LPCWSTR pszSubKey, LPCWSTR pszValue, WINAPI_RegType dwType, LPCVOID pvData, DWORD cbData);
  LPWSTR                  CharLowerWrapW(                      LPWSTR pch);
  DWORD                   CharUpperBuffWrapW(                  LPWSTR pch, DWORD cchLength);
  BOOL                    ChrCmpIA(                            WORD w1, WORD w2);
  BOOL                    ChrCmpIW(                            WCHAR w1, WCHAR w2);
  int                     CompareStringWrapW(                  LCID Locale, DWORD dwCmpFlags, LPCWSTR lpString1, int cchCount1, LPCWSTR lpString2, int cchCount2);
  HRESULT                 GetAcceptLanguagesA(                 LPSTR pszLanguages, DWORD* pcchLanguages);
  HRESULT                 GetAcceptLanguagesW(                 LPWSTR pszLanguages, DWORD* pcchLanguages);
  int                     GetDateFormatWrapW(                  LCID Locale, DWORD dwFlags, const SYSTEMTIME* lpDate, LPCWSTR pwzFormat, LPWSTR pwzDateStr, int cchDate);
  int                     GetTimeFormatWrapW(                  LCID Locale, DWORD dwFlags, const SYSTEMTIME* lpTime, LPCWSTR pwzFormat, LPWSTR pwzTimeStr, int cchTime);
  BOOL                    IntlStrEqNA(                         LPCSTR pszStr1, LPCSTR pszStr2, int nChar);
  BOOL                    IntlStrEqNW(                         LPCWSTR pszStr1, LPCWSTR pszStr2, int nChar);
  BOOL                    IntlStrEqNIA(                        LPCSTR pszStr1, LPCSTR pszStr2, int nChar);
  BOOL                    IntlStrEqNIW(                        LPCWSTR pszStr1, LPCWSTR pszStr2, int nChar);
  BOOL                    IntlStrEqWorkerA(                    BOOL fCaseSens, LPCSTR pszStr1, LPCSTR pszStr2, int nChar);
  BOOL                    IntlStrEqWorkerW(                    BOOL fCaseSens, LPCWSTR pszStr1, LPCWSTR pszStr2, int nChar);
  BOOL                    IsCharAlphaNumericWrapW(             WCHAR ch);
  BOOL                    IsCharSpaceA(                        CHAR wch);
  BOOL                    IsCharSpaceW(                        WCHAR wch);
  void                    OutputDebugStringWrapW(              LPCWSTR lpOutputString);
  HRESULT                 SHLoadIndirectString(                PCWSTR pszSource, PWSTR pszOutBuf, UINT cchOutBuf, void** ppvReserved);
  HRESULT                 SHStrDupA(                           LPCSTR pszSource, LPSTR* ppwsz);
  HRESULT                 SHStrDupW(                           LPCWSTR pszSource, LPWSTR* ppwsz);
  PSTR                    StrCatA(                             PSTR psz1, PCSTR psz2);
  PWSTR                   StrCatW(                             PWSTR psz1, PCWSTR psz2);
  PSTR                    StrCatBuffA(                         PSTR pszDest, PCSTR pszSrc, int cchDestBuffSize);
  PWSTR                   StrCatBuffW(                         PWSTR pszDest, PCWSTR pszSrc, int cchDestBuffSize);
  DWORD                   StrCatChainW(                        PWSTR pszDst, DWORD cchDst, DWORD ichAt, PCWSTR pszSrc);
  PSTR                    StrChrA(                             PSTR pszStart, WORD wMatch);
  PWSTR                   StrChrW(                             PWSTR pszStart, WCHAR wMatch);
  PSTR                    StrChrIA(                            PSTR pszStart, WORD wMatch);
  PWSTR                   StrChrIW(                            PWSTR pszStart, WCHAR wMatch);
  PWSTR                   StrChrNIW(                           PCWSTR pszStart, WCHAR wMatch, UINT cchMax);
  PWSTR                   StrChrNW(                            PWSTR pszStart, WCHAR wMatch, UINT cchMax);
  int                     StrCmpA(                             PCSTR psz1, PCWSTR psz2);
  int                     StrCmpW(                             PCWSTR psz1, PCWSTR psz2);
  int                     StrCmpCA(                            LPCSTR lpStr1, LPCSTR lpStr2);
  int                     StrCmpCW(                            LPCWSTR lpStr1, LPCWSTR lpStr2);
  int                     StrCmpIA(                            PCSTR psz1, PCSTR psz2);
  int                     StrCmpIW(                            PCWSTR psz1, PCWSTR psz2);
  int                     StrCmpICA(                           LPCSTR lpStr1, LPCSTR lpStr2);
  int                     StrCmpICW(                           LPCWSTR lpStr1, LPCWSTR lpStr2);
  int                     StrCmpLogicalW(                      PCWSTR psz1, PCWSTR psz2);
  int                     StrCmpNA(                            PCSTR psz1, PCSTR psz2, int nChar);
  int                     StrCmpNW(                            PCWSTR psz1, PCWSTR psz2, int nChar);
  int                     StrCmpNCA(                           LPCSTR pszStr1, LPCSTR pszStr2, int nChar);
  int                     StrCmpNCW(                           LPCWSTR pszStr1, LPCWSTR pszStr2, int nChar);
  int                     StrCmpNIA(                           PCSTR psz1, PCSTR psz2, int nChar);
  int                     StrCmpNIW(                           PCWSTR psz1, PCWSTR psz2, int nChar);
  int                     StrCmpNICA(                          LPCSTR pszStr1, LPCSTR pszStr2, int nChar);
  int                     StrCmpNICW(                          LPCWSTR pszStr1, LPCWSTR pszStr2, int nChar);
  PSTR                    StrCpyA(                             PSTR psz1, PCSTR psz2);
  PWSTR                   StrCpyW(                             PWSTR psz1, PCWSTR psz2);
  PSTR                    StrCpyNA(                            PSTR pszDst, PCSTR pszSrc, int cchMax);
  PWSTR                   StrCpyNW(                            PWSTR pszDst, PCWSTR pszSrc, int cchMax);
  int                     StrCSpnA(                            PCSTR pszStr, PCSTR pszSet);
  int                     StrCSpnW(                            PCWSTR pszStr, PCWSTR pszSet);
  int                     StrCSpnIA(                           PCSTR pszStr, PCSTR pszSet);
  int                     StrCSpnIW(                           PCWSTR pszStr, PCWSTR pszSet);
  PSTR                    StrDupA(                             PCSTR pszSrch);
  PWSTR                   StrDupW(                             PCWSTR pszSrch);
  PSTR                    StrFormatByteSize64A(                LONGLONG qdw, PSTR pszBuf, UINT cchBuf);
  PWSTR                   StrFormatByteSize64W(                LONGLONG qdw, PWSTR pszBuf, UINT cchBuf);
  PSTR                    StrFormatByteSizeA(                  DWORD dw, PSTR pszBuf, UINT cchBuf);
  PWSTR                   StrFormatByteSizeW(                  LONGLONG qdw, PWSTR pszBuf, UINT cchBuf);
  HRESULT                 StrFormatByteSizeEx(                 ULONGLONG ull, SFBS_FLAGS flags, LPWSTR pszBuf, UINT cchBuf);
  PSTR                    StrFormatKBSizeA(                    LONGLONG qdw, PSTR pszBuf, UINT cchBuf);
  PWSTR                   StrFormatKBSizeW(                    LONGLONG qdw, PWSTR pszBuf, UINT cchBuf);
  int                     StrFromTimeIntervalA(                PSTR pszOut, UINT cchMax, DWORD dwTimeMS, int digits);
  int                     StrFromTimeIntervalW(                PWSTR pszOut, UINT cchMax, DWORD dwTimeMS, int digits);
  BOOL                    StrIsIntlEqualA(                     BOOL fCaseSens, PCSTR pszString1, PCSTR pszString2, int nChar);
  BOOL                    StrIsIntlEqualW(                     BOOL fCaseSens, PCWSTR pszString1, PCWSTR pszString2, int nChar);
  PSTR                    StrNCatA(                            PSTR psz1, PCSTR psz2, int cchMax);
  PWSTR                   StrNCatW(                            PWSTR psz1, PCWSTR psz2, int cchMax);
  PSTR                    StrPBrkA(                            PSTR psz, PCSTR pszSet);
  PWSTR                   StrPBrkW(                            PWSTR psz, PCWSTR pszSet);
  PSTR                    StrRChrA(                            PSTR pszStart, PCSTR pszEnd, WORD wMatch);
  PWSTR                   StrRChrW(                            PWSTR pszStart, PCWSTR pszEnd, WCHAR wMatch);
  PSTR                    StrRChrIA(                           PSTR pszStart, PCSTR pszEnd, WORD wMatch);
  PWSTR                   StrRChrIW(                           PWSTR pszStart, PCWSTR pszEnd, WCHAR wMatch);
  HRESULT                 StrRetToBSTR(                        STRRET* pstr, PCUITEMID_CHILD pidl, BSTR* pbstr);
  HRESULT                 StrRetToBufA(                        STRRET* pstr, PCUITEMID_CHILD pidl, LPSTR pszBuf, UINT cchBuf);
  HRESULT                 StrRetToBufW(                        STRRET* pstr, PCUITEMID_CHILD pidl, LPWSTR pszBuf, UINT cchBuf);
  HRESULT                 StrRetToStrA(                        STRRET* pstr, PCUITEMID_CHILD pidl, LPSTR* ppszName);
  HRESULT                 StrRetToStrW(                        STRRET* pstr, PCUITEMID_CHILD pidl, LPWSTR* ppszName);
  PSTR                    StrRStrIA(                           PSTR pszSource, PCSTR pszLast, PCSTR pszSrch);
  PWSTR                   StrRStrIW(                           PWSTR pszSource, PCWSTR pszLast, PCWSTR pszSrch);
  int                     StrSpnA(                             PCSTR psz, PCSTR pszSet);
  int                     StrSpnW(                             PCWSTR psz, PCWSTR pszSet);
  PSTR                    StrStrA(                             PSTR pszFirst, PCSTR pszSrch);
  PWSTR                   StrStrW(                             PWSTR pszFirst, PCWSTR pszSrch);
  PSTR                    StrStrIA(                            PSTR pszFirst, PCSTR pszSrch);
  PWSTR                   StrStrIW(                            PWSTR pszFirst, PCWSTR pszSrch);
  int                     StrToIntA(                           PCSTR pszSrc);
  int                     StrToIntW(                           PCWSTR pszSrc);
  BOOL                    StrToInt64ExA(                       PCSTR pszString, STIF_FLAGS dwFlags, LONGLONG* pllRet);
  BOOL                    StrToInt64ExW(                       PCWSTR pszString, STIF_FLAGS dwFlags, LONGLONG* pllRet);
  BOOL                    StrToIntExA(                         PCSTR pszString, STIF_FLAGS dwFlags, int* piRet);
  BOOL                    StrToIntExW(                         PCWSTR pszString, STIF_FLAGS dwFlags, int* piRet);
  BOOL                    StrTrimA(                            PSTR psz, PCSTR pszTrimChars);
  BOOL                    StrTrimW(                            PWSTR psz, PCWSTR pszTrimChars);
  int                     wnsprintfA(                          PSTR pszDest, int cchDest, PCSTR pszFmt);
  int                     wnsprintfW(                          PWSTR pszDest, int cchDest, PCWSTR pszFmt);
  int                     wvnsprintfA(                         PSTR pszDest, int cchDest, PCSTR pszFmt, va_list arglist);
  int                     wvnsprintfW(                         PWSTR pszDest, int cchDest, PCWSTR pszFmt, va_list arglist);
  HRESULT                 ConnectToConnectionPoint(            IUnknown* punk, REFIID riidEvent, BOOL fConnect, IUnknown* punkTarget, DWORD* pdwCookie, IConnectionPoint** ppcpOut);
  HRESULT                 DllInstall(                          BOOL bInstall, PCWSTR pszCmdLine);
  HRSRC                   FindResourceWrapW(                   HMODULE hModule, LPCWSTR lpName, LPCWSTR lpType);
  int                     GetMenuPosFromID(                    HMENU hmenu, UINT id);
  HRESULT                 HashData(                            BYTE* pbData, DWORD cbData, BYTE* pbHash, DWORD cbHash);
  BOOL                    GUIDFromStringA(                     LPCSTR psz, LPGUID pguid);
  BOOL                    GUIDFromStringW(                     LPCWSTR psz, LPGUID pguid);
  BOOL                    IsInternetESCEnabled(                );
  BOOL                    IsOS(                                DWORD dwOS);
  HRESULT                 IStream_Copy(                        IStream* pstmFrom, IStream* pstmTo, DWORD cb);
  HRESULT                 IStream_Read(                        IStream* pstm, VOID* pv, ULONG cb);
  HRESULT                 IStream_ReadPidl(                    IStream* pstm, PIDLIST_RELATIVE* ppidlOut);
  HRESULT                 IStream_ReadStr(                     IStream* pstm, PWSTR* ppsz);
  HRESULT                 IStream_Reset(                       IStream* pstm);
  HRESULT                 IStream_Size(                        IStream* pstm, ULARGE_INTEGER* pui);
  HRESULT                 IStream_Write(                       IStream* pstm, const void* pv, ULONG cb);
  HRESULT                 IStream_WritePidl(                   IStream* pstm, PCUIDLIST_RELATIVE pidlWrite);
  HRESULT                 IStream_WriteStr(                    IStream* pstm, PCWSTR psz);
  void                    IUnknown_AtomicRelease(              void** ppunk);
  HRESULT                 IUnknown_GetSite(                    IUnknown* punk, REFIID riid, VOID** ppvSite);
  HRESULT                 IUnknown_GetWindow(                  IUnknown* punk, HWND* phwnd);
  HRESULT                 IUnknown_QueryService(               IUnknown* punk, REFGUID guidService, REFIID riid, void** ppvOut);
  void                    IUnknown_Set(                        IUnknown* ppunk, IUnknown* punk);
  HRESULT                 IUnknown_SetSite(                    IUnknown* punk, IUnknown* punkSite);
  BOOL                    MLFreeLibrary(                       HMODULE hModule);
  HINSTANCE               MLLoadLibraryA(                      LPCSTR lpszLibFileName, HMODULE hModule, DWORD dwCrossCodePage);
  HINSTANCE               MLLoadLibraryW(                      LPCWSTR lpszLibFileName, HMODULE hModule, DWORD dwCrossCodePage);
  HWND                    MLHtmlHelpA(                         HWND hwndCaller, LPCSTR pszFile, UINT uCommand, DWORD_PTR dwData, DWORD dwCrossCodePage);
  HWND                    MLHtmlHelpW(                         HWND hwndCaller, LPCWSTR pszFile, UINT uCommand, DWORD_PTR dwData, DWORD dwCrossCodePage);
  BOOL                    MLWinHelpA(                          HWND hWndMain, LPCSTR lpszHelp, UINT uCommand, DWORD_PTR dwData);
  BOOL                    MLWinHelpW(                          HWND hWndMain, LPCWSTR lpszHelp, UINT uCommand, DWORD_PTR dwData);
  HRESULT                 ParseURLA(                           LPCSTR pcszUrl, PARSEDURLA* ppu);
  HRESULT                 ParseURLW(                           LPCWSTR pcszUrl, PARSEDURLW* ppu);
  HRESULT                 QISearch(                            void* that, LPCQITAB pqit, REFIID riid, void** ppv);
  int                     SHAnsiToAnsi(                        LPCSTR pszSrc, LPWSTR pszDst, int cchBuf);
  int                     SHAnsiToUnicode(                     PCSTR pszSrc, PWSTR pwszDst, int cwchBuf);
  HRESULT                 SHAutoComplete(                      HWND hwndEdit, DWORD dwFlags);
  IStream*                SHCreateMemStream(                   const BYTE* pInit, UINT cbInit);
  HRESULT                 SHCreateStreamOnFileA(               LPCSTR pszFile, WINAPI_STGM_FLAGS grfMode, IStream** ppstm);
  HRESULT                 SHCreateStreamOnFileW(               LPCWSTR pszFile, WINAPI_STGM_FLAGS grfMode, IStream** ppstm);
  HRESULT                 SHCreateStreamOnFileEx(              LPCWSTR pszFile, WINAPI_STGM_FLAGS grfMode, DWORD dwAttributes, BOOL fCreate, IStream* pstmTemplate, IStream** ppstm);
  BOOL                    SHCreateThread(                      LPTHREAD_START_ROUTINE pfnThreadProc, void* pData, SHCT_FLAGS dwFlags, LPTHREAD_START_ROUTINE pfnCallback);
  HRESULT                 SHCreateThreadRef(                   LONG* pcRef, IUnknown** ppunk);
  BOOL                    SHCreateThreadWithHandle(            LPTHREAD_START_ROUTINE pfnThreadProc, void* pData, SHCT_FLAGS flags, LPTHREAD_START_ROUTINE pfnCallback, HANDLE* pHandle);
  int                     SHFormatDateTimeA(                   const FILETIME* pft, DWORD* pdwFlags, LPSTR pszBuf, UINT cchBuf);
  int                     SHFormatDateTimeW(                   const FILETIME* pft, DWORD* pdwFlags, LPWSTR pszBuf, UINT cchBuf);
  HRESULT                 SHGetThreadRef(                      IUnknown** ppunk);
  HRESULT                 SHSetThreadRef(                      IUnknown* punk);
  HRESULT                 SHReleaseThreadRef(                  );
  long                    SHGlobalCounterDecrement(            const SHGLOBALCOUNTER id);
  long                    SHGlobalCounterGetValue(             const SHGLOBALCOUNTER id);
  long                    SHGlobalCounterIncrement(            const SHGLOBALCOUNTER id);
  HRESULT                 SHIsChildOrSelf(                     HWND hwndParent, HWND hwnd);
  BOOL                    SHIsLowMemoryMachine(                DWORD dwType);
  int                     SHMessageBoxCheckA(                  HWND hwnd, LPCSTR pszText, LPCSTR pszCaption, UINT uType, int iDefault, LPCSTR pszRegVal);
  int                     SHMessageBoxCheckW(                  HWND hwnd, LPCWSTR pszText, LPCWSTR pszCaption, UINT uType, int iDefault, LPCWSTR pszRegVal);
  LRESULT                 SHSendMessageBroadcast(              UINT uMsg, WPARAM wParam, LPARAM lParam);
  CHAR                    SHStripMneumonicA(                   LPSTR* pszMenu);
  WCHAR                   SHStripMneumonicW(                   LPWSTR* pszMenu);
  int                     SHUnicodeToAnsi(                     PCWSTR pwszSrc, PSTR pszDst, int cchBuf);
  int                     SHUnicodeToUnicode(                  PCWSTR pwzSrc, PWSTR pwzDst, int cwchBuf);
  WINAPI_ERROR_CODE       StopWatchFlush(                      );
  DWORD                   StopWatchMode(                       );
  UINT                    WhichPlatform(                       );
  HRESULT                 SHRunIndirectRegClientCommand(       HWND hwnd, LPCWSTR pszClientType);
  HRESULT                 DupWideToAnsi(                       LPCWSTR pwszString, LPSTR* ppszStr);
  HRESULT                 IStream_ReadStrLong(                 IStream* pStream, LPWSTR* ppwszString);
  HRESULT                 IStream_WriteStrLong(                IStream* pStream, LPCWSTR pwszString);
  HRESULT                 IUnknown_RemoveBackReferences(       IUnknown* pUnk);
  HRESULT                 IUnknown_TranslateAcceleratorGlobal( IUnknown* pUnk, MSG* pMsg);
  HRESULT                 IUnknown_TranslateAcceleratorIO(     IUnknown* pUnk, MSG* pMsg);
  HRESULT                 MapWin32ErrorToSTG(                  HRESULT hrWin32);
  HRESULT                 ModeToCreateFileFlags(               DWORD grfFlags, BOOL bCreate, DWORD* pDesiredAccess, DWORD* pShareMode, DWORD* pDisposition);
  BOOL                    PathUnExpandEnvStringsForUserW(      HANDLE hUserToken, LPCWSTR pwszPath, LPWSTR pwszBuf, UINT cchBuf);
  BOOL                    PathUnExpandSystemEnvStringsW(       LPCWSTR pwszPath, LPWSTR pwszBuf, UINT cchBuf);
  HRESULT                 QuerySourceCreateFromKey(            HKEY hKey, LPCWSTR pwszSubKey, BOOL shouldCreate, REFIID riid, LPVOID* ppInterface);
  HRESULT                 QuerySourceCreateFromKeyEx(          HKEY hKey, LPCWSTR pwszSubKey, BOOL shouldCreate, ACCESS_MASK amDesired, REFIID riid, LPVOID* ppInterface);
  HRESULT                 SHAnsiToUnicodeCPAlloc(              UINT codePage, LPCSTR pszString, LPWSTR* ppwszConverted);
  BOOL                    SHAreIconsEqual(                     HICON hIcon1, HICON hIcon2);
  BOOL                    SHBoolSystemParametersInfo(          WINAPI_SystemParametersInfoEnum uiAction, PVOID pData);
  HRESULT                 SHCreatePropertyBagOnMemory(         PVOID pUnused, REFIID riid, PVOID* ppv);
  HRESULT                 SHCreatePropertyStoreOnXML(          IXMLDOMNode* pXmlDomNode, WINAPI_STGM_FLAGS grfMode, IPropertyBag* pPropBagInit, REFIID riid, PVOID* ppv);
  HRESULT                 SHCreateStreamOnDllResourceW(        LPCWSTR pwszModule, LPCWSTR pwszName, LPCWSTR pwszType, IStream** ppStream);
  HRESULT                 SHCreateStreamOnModuleResourceW(     HMODULE hModule, LPCWSTR pwszName, LPCWSTR pwszType, IStream** ppStream);
  HRESULT                 SHExpandEnvironmentStringsAlloc(     LPCWSTR pwszExpandableString, LPWSTR* ppwszExpanded);
  HRESULT                 SHForwardContextMenuMsg(             IUnknown* pUnk, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT* pResult, BOOL useIContextMenu2);
  DWORD                   SHGetSizeShared(                     PVOID pData);
  HRESULT                 SHInvokeCommandOnContextMenu(        HWND hwnd, IObjectWithSite* pSite, IContextMenu* pCtxMenu, WINAPI_CMIC_Mask fMask, LPCSTR pszVerb, LPCWSTR pwszDirectory);
  HRESULT                 SHInvokeCommandOnContextMenuEx(      HWND hwnd, IObjectWithSite* pSite, IContextMenu* pCtxMenu, WINAPI_CMIC_Mask fMask, UINT queryFlags, LPCSTR pszVerb, LPCWSTR pwszDirectory);
  HRESULT                 SHInvokeCommandWithFlagsAndSite(     HWND hwnd, IObjectWithSite* pSite, IShellFolder* pShellFolder, LPITEMIDLIST pidl, WINAPI_CMIC_Mask fMask, LPCSTR pszVerb);
  HRESULT                 SHInvokeCommandsOnContextMenuEx(     HWND hwnd, IObjectWithSite* pSite, IContextMenu* pCtxMenu, WINAPI_CMIC_Mask fMask, UINT queryFlags, LPCSTR* ppszVerbs, UINT numVerbs, LPCWSTR pwszDirectory);
  LSTATUS                 SHRegSetValue(                       HKEY hKey, LPCWSTR pwszSubKey, LPCWSTR pwszValue, SRRF srrfFlags, DWORD dwType, LPCVOID pvData, DWORD cbData);
  HRESULT                 SHUnicodeToAnsiCPAlloc(              UINT codePage, LPCWSTR pwszString, LPSTR* ppszConverted);
]]
return ffi.load( 'shlwapi.dll' )
