require( 'waffi.headers.windows' )
require( 'waffi.headers.cryptography' )
local ffi = require( 'ffi' )
ffi.cdef [[
  typedef int WINAPI_CERT_STORE_PROVIDER; //Alias
  static const WINAPI_CERT_STORE_PROVIDER CERT_STORE_PROV_MSG = 1;
  static const WINAPI_CERT_STORE_PROVIDER CERT_STORE_PROV_MEMORY = 2;
  static const WINAPI_CERT_STORE_PROVIDER CERT_STORE_PROV_FILE = 3;
  static const WINAPI_CERT_STORE_PROVIDER CERT_STORE_PROV_REG = 4;
  static const WINAPI_CERT_STORE_PROVIDER CERT_STORE_PROV_PKCS7 = 5;
  static const WINAPI_CERT_STORE_PROVIDER CERT_STORE_PROV_SERIALIZED = 6;
  static const WINAPI_CERT_STORE_PROVIDER CERT_STORE_PROV_FILENAME_A = 7;
  static const WINAPI_CERT_STORE_PROVIDER CERT_STORE_PROV_FILENAME_W = 8;
  static const WINAPI_CERT_STORE_PROVIDER CERT_STORE_PROV_SYSTEM_A = 9;
  static const WINAPI_CERT_STORE_PROVIDER CERT_STORE_PROV_SYSTEM_W = 10;
  static const WINAPI_CERT_STORE_PROVIDER CERT_STORE_PROV_COLLECTION = 11;
  static const WINAPI_CERT_STORE_PROVIDER CERT_STORE_PROV_SYSTEM_REGISTRY_A = 12;
  static const WINAPI_CERT_STORE_PROVIDER CERT_STORE_PROV_SYSTEM_REGISTRY_W = 13;
  static const WINAPI_CERT_STORE_PROVIDER CERT_STORE_PROV_PHYSICAL = 14;
  static const WINAPI_CERT_STORE_PROVIDER CERT_STORE_PROV_SMART_CARD_W = 15;
  static const WINAPI_CERT_STORE_PROVIDER CERT_STORE_PROV_SMART_CARD = 15;
  static const WINAPI_CERT_STORE_PROVIDER CERT_STORE_PROV_LDAP_W = 16;
  static const WINAPI_CERT_STORE_PROVIDER CERT_STORE_PROV_LDAP = 16;
  static const WINAPI_CERT_STORE_PROVIDER CERT_STORE_PROV_PKCS12 = 17;
  BOOL                                CryptInstallDefaultContext(                         HCRYPTPROV hCryptProv, DWORD dwDefaultType, const void* pvDefaultPara, DWORD dwFlags, void* pvReserved, HCRYPTDEFAULTCONTEXT* phDefaultContext);
  BOOL                                CryptUninstallDefaultContext(                       HCRYPTDEFAULTCONTEXT hDefaultContext, DWORD dwFlags, void* pvReserved);
  BOOL                                CryptDecodeObject(                                  WINAPI_CertEncodingType dwCertEncodingType, LPCSTR lpszStructType, const BYTE* pbEncoded, DWORD cbEncoded, WINAPI_CryptDecodeObjectFlags dwFlags, void* pvStructInfo, DWORD* pcbStructInfo);
  BOOL                                CryptDecodeObjectEx(                                WINAPI_CertEncodingType dwCertEncodingType, LPCSTR lpszStructType, const BYTE* pbEncoded, DWORD cbEncoded, WINAPI_CryptDecodeObjectFlags dwFlags, PCRYPT_DECODE_PARA pDecodePara, void* pvStructInfo, DWORD* pcbStructInfo);
  BOOL                                CryptEncodeObject(                                  WINAPI_CertEncodingType dwCertEncodingType, LPCSTR lpszStructType, const void* pvStructInfo, BYTE* pbEncoded, DWORD* pcbEncoded);
  BOOL                                CryptEncodeObjectEx(                                WINAPI_CertEncodingType dwCertEncodingType, LPCSTR lpszStructType, const void* pvStructInfo, WINAPI_CryptEncodeObjectFlags dwFlags, PCRYPT_ENCODE_PARA pEncodePara, void* pvEncoded, DWORD* pcbEncoded);
  BOOL                                CryptProtectData(                                   DATA_BLOB* pDataIn, LPCWSTR szDataDescr, DATA_BLOB* pOptionalEntropy, PVOID pvReserved, CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct, WINAPI_CryptProtectDataFlags dwFlags, DATA_BLOB* pDataOut);
  BOOL                                CryptProtectMemory(                                 LPVOID pData, DWORD cbData, WINAPI_CryptProtectMemoryFlags dwFlags);
  BOOL                                CryptUnprotectData(                                 DATA_BLOB* pDataIn, LPWSTR* ppszDataDescr, DATA_BLOB* pOptionalEntropy, PVOID pvReserved, CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct, WINAPI_CryptProtectDataFlags dwFlags, DATA_BLOB* pDataOut);
  BOOL                                CryptUnprotectMemory(                               LPVOID pData, DWORD cbData, WINAPI_CryptProtectMemoryFlags dwFlags);
  BOOL                                CertAddStoreToCollection(                           HCERTSTORE hCollectionStore, HCERTSTORE hSiblingStore, WINAPI_CertPhysicalStoreFlags dwUpdateFlag, DWORD dwPriority);
  BOOL                                CertCloseStore(                                     HCERTSTORE hCertStore, WINAPI_CertCloseStoreFlags dwFlags);
  BOOL                                CertControlStore(                                   HCERTSTORE hCertStore, DWORD dwFlags, WINAPI_CertControlType dwCtrlType, const void* pvCtrlPara);
  HCERTSTORE                          CertDuplicateStore(                                 HCERTSTORE hCertStore);
  BOOL                                CertEnumPhysicalStore(                              const void* pvSystemStore, DWORD dwFlags, void* pvArg, PFN_CERT_ENUM_PHYSICAL_STORE pfnEnum);
  BOOL                                CertEnumSystemStore(                                WINAPI_CertSystemStoreFlags dwFlags, void* pvSystemStoreLocationPara, void* pvArg, PFN_CERT_ENUM_SYSTEM_STORE pfnEnum);
  BOOL                                CertEnumSystemStoreLocation(                        DWORD dwFlags, void* pvArg, PFN_CERT_ENUM_SYSTEM_STORE_LOCATION pfnEnum);
  BOOL                                CertGetStoreProperty(                               HCERTSTORE hCertStore, DWORD dwPropId, void* pvData, DWORD* pcbData);
  HCERTSTORE                          CertOpenStore(                                      WINAPI_CERT_STORE_PROVIDER lpszStoreProvider, WINAPI_CertEncodingType dwMsgAndCertEncodingType, HCRYPTPROV_LEGACY hCryptProv, WINAPI_CertOpenStoreFlags dwFlags, const void* pvPara);
  HCERTSTORE                          CertOpenSystemStoreA(                               HCRYPTPROV_LEGACY hprov, LPCSTR szSubsystemProtocol);
  HCERTSTORE                          CertOpenSystemStoreW(                               HCRYPTPROV_LEGACY hprov, LPCWSTR szSubsystemProtocol);
  BOOL                                CertRegisterPhysicalStore(                          const void* pvSystemStore, DWORD dwFlags, LPCWSTR pwszStoreName, PCERT_PHYSICAL_STORE_INFO pStoreInfo, void* pvReserved);
  BOOL                                CertRegisterSystemStore(                            const void* pvSystemStore, DWORD dwFlags, PCERT_SYSTEM_STORE_INFO pStoreInfo, void* pvReserved);
  void                                CertRemoveStoreFromCollection(                      HCERTSTORE hCollectionStore, HCERTSTORE hSiblingStore);
  BOOL                                CertSaveStore(                                      HCERTSTORE hCertStore, DWORD dwMsgAndCertEncodingType, DWORD dwSaveAs, DWORD dwSaveTo, void* pvSaveToPara, DWORD dwFlags);
  BOOL                                CertSetStoreProperty(                               HCERTSTORE hCertStore, DWORD dwPropId, DWORD dwFlags, const void* pvData);
  BOOL                                CertUnregisterPhysicalStore(                        const void* pvSystemStore, DWORD dwFlags, LPCWSTR pwszStoreName);
  BOOL                                CertUnregisterSystemStore(                          const void* pvSystemStore, DWORD dwFlags);
  BOOL                                CertAddSerializedElementToStore(                    HCERTSTORE hCertStore, const BYTE* pbElement, DWORD cbElement, DWORD dwAddDisposition, DWORD dwFlags, DWORD dwContextTypeFlags, WINAPI_CertificateStoreContextType* pdwContextType, const void** ppvContext);
  const void*                         CertCreateContext(                                  WINAPI_CertificateStoreContextType dwContextType, WINAPI_CertEncodingType dwEncodingType, const BYTE* pbEncoded, DWORD cbEncoded, WINAPI_CertCreateContextFlags dwFlags, PCERT_CREATE_CONTEXT_PARA pCreatePara);
  BOOL                                CertEnumSubjectInSortedCTL(                         PCCTL_CONTEXT pCtlContext, void** ppvNextSubject, PCRYPT_DER_BLOB pSubjectIdentifier, PCRYPT_DER_BLOB pEncodedAttributes);
  PCTL_ENTRY                          CertFindSubjectInCTL(                               WINAPI_CertEncodingType dwEncodingType, DWORD dwSubjectType, void* pvSubject, PCCTL_CONTEXT pCtlContext, DWORD dwFlags);
  BOOL                                CertFindSubjectInSortedCTL(                         PCRYPT_DATA_BLOB pSubjectIdentifier, PCCTL_CONTEXT pCtlContext, DWORD dwFlags, void* pvReserved, PCRYPT_DER_BLOB pEncodedAttributes);
  BOOL                                CertAddCertificateContextToStore(                   HCERTSTORE hCertStore, PCCERT_CONTEXT pCertContext, DWORD dwAddDisposition, PCCERT_CONTEXT* ppStoreContext);
  BOOL                                CertAddCertificateLinkToStore(                      HCERTSTORE hCertStore, PCCERT_CONTEXT pCertContext, DWORD dwAddDisposition, PCCERT_CONTEXT* ppStoreContext);
  BOOL                                CertAddEncodedCertificateToStore(                   HCERTSTORE hCertStore, WINAPI_CertEncodingType dwCertEncodingType, const BYTE* pbCertEncoded, DWORD cbCertEncoded, WINAPI_CertStoreAddDisposition dwAddDisposition, PCCERT_CONTEXT* ppCertContext);
  VOID                                CertAddRefServerOcspResponse(                       HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse);
  VOID                                CertAddRefServerOcspResponseContext(                PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext);
  VOID                                CertCloseServerOcspResponse(                        HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse, DWORD dwFlags);
  PCCERT_CONTEXT                      CertCreateCertificateContext(                       WINAPI_CertEncodingType dwCertEncodingType, const BYTE* pbCertEncoded, DWORD cbCertEncoded);
  PCCERT_CONTEXT                      CertCreateSelfSignCertificate(                      HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, PCERT_NAME_BLOB pSubjectIssuerBlob, DWORD dwFlags, PCRYPT_KEY_PROV_INFO pKeyProvInfo, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, PSYSTEMTIME pStartTime, PSYSTEMTIME pEndTime, PCERT_EXTENSIONS pExtensions);
  BOOL                                CertDeleteCertificateFromStore(                     PCCERT_CONTEXT pCertContext);
  PCCERT_CONTEXT                      CertDuplicateCertificateContext(                    PCCERT_CONTEXT pCertContext);
  PCCERT_CONTEXT                      CertEnumCertificatesInStore(                        HCERTSTORE hCertStore, PCCERT_CONTEXT pPrevCertContext);
  PCCERT_CONTEXT                      CertFindCertificateInStore(                         HCERTSTORE hCertStore, WINAPI_CertEncodingType dwCertEncodingType, DWORD dwFindFlags, WINAPI_CertFindType dwFindType, const void* pvFindPara, PCCERT_CONTEXT pPrevCertContext);
  BOOL                                CertFreeCertificateContext(                         PCCERT_CONTEXT pCertContext);
  PCCERT_CONTEXT                      CertGetIssuerCertificateFromStore(                  HCERTSTORE hCertStore, PCCERT_CONTEXT pSubjectContext, PCCERT_CONTEXT pPrevIssuerContext, DWORD* pdwFlags);
  PCCERT_SERVER_OCSP_RESPONSE_CONTEXT CertGetServerOcspResponseContext(                   HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse, DWORD dwFlags, LPVOID pvReserved);
  PCCERT_CONTEXT                      CertGetSubjectCertificateFromStore(                 HCERTSTORE hCertStore, WINAPI_CertEncodingType dwCertEncodingType, PCERT_INFO pCertId);
  BOOL                                CertGetValidUsages(                                 DWORD cCerts, PCCERT_CONTEXT* rghCerts, int* cNumOIDs, LPSTR* rghOIDs, DWORD* pcbOIDs);
  HCERT_SERVER_OCSP_RESPONSE          CertOpenServerOcspResponse(                         PCCERT_CHAIN_CONTEXT pChainContext, DWORD dwFlags, LPVOID pvReserved);
  BOOL                                CertRetrieveLogoOrBiometricInfo(                    PCCERT_CONTEXT pCertContext, LPCSTR lpszLogoOrBiometricType, DWORD dwRetrievalFlags, DWORD dwTimeout, DWORD dwFlags, void* pvReserved, BYTE** ppbData, DWORD* pcbData, LPWSTR* ppwszMimeType);
  BOOL                                CertSelectCertificateChains(                        LPCGUID pSelectionContext, WINAPI_CertSelectFlags dwFlags, PCCERT_SELECT_CHAIN_PARA pChainParameters, DWORD cCriteria, PCCERT_SELECT_CRITERIA rgpCriteria, HCERTSTORE hStore, PDWORD pcSelection, PCCERT_CHAIN_CONTEXT** pprgpSelection);
  BOOL                                CertSerializeCertificateStoreElement(               PCCERT_CONTEXT pCertContext, DWORD dwFlags, BYTE* pbElement, DWORD* pcbElement);
  BOOL                                CertVerifySubjectCertificateContext(                PCCERT_CONTEXT pSubject, PCCERT_CONTEXT pIssuer, DWORD* pdwFlags);
  BOOL                                CertAddCRLContextToStore(                           HCERTSTORE hCertStore, PCCRL_CONTEXT pCrlContext, DWORD dwAddDisposition, PCCRL_CONTEXT* ppStoreContext);
  BOOL                                CertAddCRLLinkToStore(                              HCERTSTORE hCertStore, PCCRL_CONTEXT pCrlContext, DWORD dwAddDisposition, PCCRL_CONTEXT* ppStoreContext);
  BOOL                                CertAddEncodedCRLToStore(                           HCERTSTORE hCertStore, WINAPI_CertEncodingType dwCertEncodingType, const BYTE* pbCrlEncoded, DWORD cbCrlEncoded, DWORD dwAddDisposition, PCCRL_CONTEXT* ppCrlContext);
  PCCRL_CONTEXT                       CertCreateCRLContext(                               WINAPI_CertEncodingType dwCertEncodingType, const BYTE* pbCrlEncoded, DWORD cbCrlEncoded);
  BOOL                                CertDeleteCRLFromStore(                             PCCRL_CONTEXT pCrlContext);
  PCCRL_CONTEXT                       CertDuplicateCRLContext(                            PCCRL_CONTEXT pCrlContext);
  PCCRL_CONTEXT                       CertEnumCRLsInStore(                                HCERTSTORE hCertStore, PCCRL_CONTEXT pPrevCrlContext);
  BOOL                                CertFindCertificateInCRL(                           PCCERT_CONTEXT pCert, PCCRL_CONTEXT pCrlContext, DWORD dwFlags, void* pvReserved, PCRL_ENTRY* ppCrlEntry);
  PCCRL_CONTEXT                       CertFindCRLInStore(                                 HCERTSTORE hCertStore, WINAPI_CertEncodingType dwEncodingType, WINAPI_CrlFindIssuedByFlags dwFindFlags, WINAPI_CrlFindType dwFindType, const void* pvFindPara, PCCRL_CONTEXT pPrevCrlContext);
  BOOL                                CertFreeCRLContext(                                 PCCRL_CONTEXT pCrlContext);
  PCCRL_CONTEXT                       CertGetCRLFromStore(                                HCERTSTORE hCertStore, PCCERT_CONTEXT pIssuerContext, PCCRL_CONTEXT pPrevCrlContext, DWORD* pdwFlags);
  BOOL                                CertSerializeCRLStoreElement(                       PCCRL_CONTEXT pCrlContext, DWORD dwFlags, BYTE* pbElement, DWORD* pcbElement);
  BOOL                                CertAddCTLContextToStore(                           HCERTSTORE hCertStore, PCCTL_CONTEXT pCtlContext, DWORD dwAddDisposition, PCCTL_CONTEXT* ppStoreContext);
  BOOL                                CertAddCTLLinkToStore(                              HCERTSTORE hCertStore, PCCTL_CONTEXT pCtlContext, DWORD dwAddDisposition, PCCTL_CONTEXT* ppStoreContext);
  BOOL                                CertAddEncodedCTLToStore(                           HCERTSTORE hCertStore, DWORD dwMsgAndCertEncodingType, const BYTE* pbCtlEncoded, DWORD cbCtlEncoded, DWORD dwAddDisposition, PCCTL_CONTEXT* ppCtlContext);
  PCCTL_CONTEXT                       CertCreateCTLContext(                               DWORD dwMsgAndCertEncodingType, const BYTE* pbCtlEncoded, DWORD cbCtlEncoded);
  BOOL                                CertDeleteCTLFromStore(                             PCCTL_CONTEXT pCtlContext);
  PCCTL_CONTEXT                       CertDuplicateCTLContext(                            PCCTL_CONTEXT pCtlContext);
  PCCTL_CONTEXT                       CertEnumCTLsInStore(                                HCERTSTORE hCertStore, PCCTL_CONTEXT pPrevCtlContext);
  PCCTL_CONTEXT                       CertFindCTLInStore(                                 HCERTSTORE hCertStore, DWORD dwMsgAndCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, const void* pvFindPara, PCCTL_CONTEXT pPrevCtlContext);
  BOOL                                CertFreeCTLContext(                                 PCCTL_CONTEXT pCtlContext);
  BOOL                                CertSerializeCTLStoreElement(                       PCCTL_CONTEXT pCtlContext, DWORD dwFlags, BYTE* pbElement, DWORD* pcbElement);
  DWORD                               CertEnumCertificateContextProperties(               PCCERT_CONTEXT pCertContext, DWORD dwPropId);
  DWORD                               CertEnumCRLContextProperties(                       PCCRL_CONTEXT pCrlContext, DWORD dwPropId);
  DWORD                               CertEnumCTLContextProperties(                       PCCTL_CONTEXT pCtlContext, DWORD dwPropId);
  BOOL                                CertGetCertificateContextProperty(                  PCCERT_CONTEXT pCertContext, WINAPI_CertPropId dwPropId, void* pvData, DWORD* pcbData);
  BOOL                                CertGetCRLContextProperty(                          PCCRL_CONTEXT pCrlContext, WINAPI_CertPropId dwPropId, void* pvData, DWORD* pcbData);
  BOOL                                CertGetCTLContextProperty(                          PCCTL_CONTEXT pCtlContext, WINAPI_CertPropId dwPropId, void* pvData, DWORD* pcbData);
  BOOL                                CertSetCertificateContextProperty(                  PCCERT_CONTEXT pCertContext, WINAPI_CertPropId dwPropId, WINAPI_CertSetPropertyFlags dwFlags, const void* pvData);
  BOOL                                CertSetCRLContextProperty(                          PCCRL_CONTEXT pCrlContext, WINAPI_CertPropId dwPropId, WINAPI_CertSetPropertyFlags dwFlags, const void* pvData);
  BOOL                                CertSetCTLContextProperty(                          PCCTL_CONTEXT pCtlContext, WINAPI_CertPropId dwPropId, DWORD dwFlags, const void* pvData);
  BOOL                                CertVerifyCTLUsage(                                 WINAPI_CertEncodingType dwEncodingType, DWORD dwSubjectType, void* pvSubject, PCTL_USAGE pSubjectUsage, DWORD dwFlags, PCTL_VERIFY_USAGE_PARA pVerifyUsagePara, PCTL_VERIFY_USAGE_STATUS pVerifyUsageStatus);
  BOOL                                CryptMsgEncodeAndSignCTL(                           WINAPI_CertEncodingType dwMsgEncodingType, PCTL_INFO pCtlInfo, PCMSG_SIGNED_ENCODE_INFO pSignInfo, DWORD dwFlags, BYTE* pbEncoded, DWORD* pcbEncoded);
  BOOL                                CryptMsgGetAndVerifySigner(                         HCRYPTMSG hCryptMsg, DWORD cSignerStore, HCERTSTORE* rghSignerStore, DWORD dwFlags, PCCERT_CONTEXT* ppSigner, DWORD* pdwSignerIndex);
  BOOL                                CryptMsgSignCTL(                                    WINAPI_CertEncodingType dwMsgEncodingType, BYTE* pbCtlContent, DWORD cbCtlContent, PCMSG_SIGNED_ENCODE_INFO pSignInfo, DWORD dwFlags, BYTE* pbEncoded, DWORD* pcbEncoded);
  BOOL                                CertCreateCertificateChainEngine(                   PCERT_CHAIN_ENGINE_CONFIG pConfig, HCERTCHAINENGINE* phChainEngine);
  BOOL                                CertCreateCTLEntryFromCertificateContextProperties( PCCERT_CONTEXT pCertContext, DWORD cOptAttr, PCRYPT_ATTRIBUTE rgOptAttr, DWORD dwFlags, void* pvReserved, PCTL_ENTRY pCtlEntry, DWORD* pcbCtlEntry);
  PCCERT_CHAIN_CONTEXT                CertDuplicateCertificateChain(                      PCCERT_CHAIN_CONTEXT pChainContext);
  PCCERT_CHAIN_CONTEXT                CertFindChainInStore(                               HCERTSTORE hCertStore, WINAPI_CertEncodingType dwCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, const void* pvFindPara, PCCERT_CHAIN_CONTEXT pPrevChainContext);
  VOID                                CertFreeCertificateChain(                           PCCERT_CHAIN_CONTEXT pChainContext);
  void                                CertFreeCertificateChainEngine(                     HCERTCHAINENGINE hChainEngine);
  VOID                                CertFreeCertificateChainList(                       PCCERT_CHAIN_CONTEXT* prgpSelection);
  BOOL                                CertGetCertificateChain(                            HCERTCHAINENGINE hChainEngine, PCCERT_CONTEXT pCertContext, LPFILETIME pTime, HCERTSTORE hAdditionalStore, PCERT_CHAIN_PARA pChainPara, WINAPI_CertChainFlags dwFlags, LPVOID pvReserved, PCCERT_CHAIN_CONTEXT* ppChainContext);
  BOOL                                CertIsValidCRLForCertificate(                       PCCERT_CONTEXT pCert, PCCRL_CONTEXT pCRL, DWORD dwFlags, void* pvReserved);
  BOOL                                CertSetCertificateContextPropertiesFromCTLEntry(    PCCERT_CONTEXT pCertContext, PCTL_ENTRY pCtlEntry, DWORD dwFlags);
  BOOL                                CertVerifyCertificateChainPolicy(                   LPCSTR pszPolicyOID, PCCERT_CHAIN_CONTEXT pChainContext, PCERT_CHAIN_POLICY_PARA pPolicyPara, PCERT_CHAIN_POLICY_STATUS pPolicyStatus);
  DWORD                               CryptMsgCalculateEncodedLength(                     WINAPI_CertEncodingType dwMsgEncodingType, DWORD dwFlags, WINAPI_CryptMsgType dwMsgType, const void* pvMsgEncodeInfo, LPSTR pszInnerContentObjID, DWORD cbData);
  BOOL                                CryptMsgClose(                                      HCRYPTMSG hCryptMsg);
  BOOL                                CryptMsgControl(                                    HCRYPTMSG hCryptMsg, WINAPI_CryptMsgControlFlags dwFlags, WINAPI_CryptMsgControlType dwCtrlType, const void* pvCtrlPara);
  BOOL                                CryptMsgUpdate(                                     HCRYPTMSG hCryptMsg, const BYTE* pbData, DWORD cbData, BOOL fFinal);
  BOOL                                CryptMsgCountersign(                                HCRYPTMSG hCryptMsg, DWORD dwIndex, DWORD cCountersigners, PCMSG_SIGNER_ENCODE_INFO rgCountersigners);
  BOOL                                CryptMsgCountersignEncoded(                         WINAPI_CertEncodingType dwEncodingType, PBYTE pbSignerInfo, DWORD cbSignerInfo, DWORD cCountersigners, PCMSG_SIGNER_ENCODE_INFO rgCountersigners, PBYTE pbCountersignature, PDWORD pcbCountersignature);
  HCRYPTMSG                           CryptMsgDuplicate(                                  HCRYPTMSG hCryptMsg);
  BOOL                                CryptMsgGetParam(                                   HCRYPTMSG hCryptMsg, WINAPI_CryptMsgParamType dwParamType, DWORD dwIndex, void* pvData, DWORD* pcbData);
  HCRYPTMSG                           CryptMsgOpenToDecode(                               WINAPI_CertEncodingType dwMsgEncodingType, WINAPI_CryptMsgOpenFlags dwFlags, WINAPI_CryptMsgType dwMsgType, HCRYPTPROV_LEGACY hCryptProv, PCERT_INFO pRecipientInfo, PCMSG_STREAM_INFO pStreamInfo);
  HCRYPTMSG                           CryptMsgOpenToEncode(                               WINAPI_CertEncodingType dwMsgEncodingType, DWORD dwFlags, WINAPI_CryptMsgType dwMsgType, const void* pvMsgEncodeInfo, LPSTR pszInnerContentObjID, PCMSG_STREAM_INFO pStreamInfo);
  BOOL                                CryptMsgVerifyCountersignatureEncoded(              HCRYPTPROV_LEGACY hCryptProv, WINAPI_CertEncodingType dwEncodingType, PBYTE pbSignerInfo, DWORD cbSignerInfo, PBYTE pbSignerInfoCountersignature, DWORD cbSignerInfoCountersignature, PCERT_INFO pciCountersigner);
  BOOL                                CryptMsgVerifyCountersignatureEncodedEx(            HCRYPTPROV_LEGACY hCryptProv, WINAPI_CertEncodingType dwEncodingType, PBYTE pbSignerInfo, DWORD cbSignerInfo, PBYTE pbSignerInfoCountersignature, DWORD cbSignerInfoCountersignature, WINAPI_CryptMsgSignerType dwSignerType, void* pvSigner, DWORD dwFlags, void* pvReserved);
  BOOL                                CryptDecodeMessage(                                 DWORD dwMsgTypeFlags, PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const BYTE* pbEncodedBlob, DWORD cbEncodedBlob, DWORD dwPrevInnerContentType, WINAPI_CryptMsgType* pdwMsgType, DWORD* pdwInnerContentType, BYTE* pbDecoded, DWORD* pcbDecoded, PCCERT_CONTEXT* ppXchgCert, PCCERT_CONTEXT* ppSignerCert);
  BOOL                                CryptDecryptAndVerifyMessageSignature(              PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const BYTE* pbEncryptedBlob, DWORD cbEncryptedBlob, BYTE* pbDecrypted, DWORD* pcbDecrypted, PCCERT_CONTEXT* ppXchgCert, PCCERT_CONTEXT* ppSignerCert);
  BOOL                                CryptDecryptMessage(                                PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, const BYTE* pbEncryptedBlob, DWORD cbEncryptedBlob, BYTE* pbDecrypted, DWORD* pcbDecrypted, PCCERT_CONTEXT* ppXchgCert);
  BOOL                                CryptEncryptMessage(                                PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara, DWORD cRecipientCert, PCCERT_CONTEXT rgpRecipientCert, const BYTE* pbToBeEncrypted, DWORD cbToBeEncrypted, BYTE* pbEncryptedBlob, DWORD* pcbEncryptedBlob);
  HCERTSTORE                          CryptGetMessageCertificates(                        DWORD dwMsgAndCertEncodingType, HCRYPTPROV_LEGACY hCryptProv, DWORD dwFlags, const BYTE* pbSignedBlob, DWORD cbSignedBlob);
  LONG                                CryptGetMessageSignerCount(                         WINAPI_CertEncodingType dwMsgEncodingType, const BYTE* pbSignedBlob, DWORD cbSignedBlob);
  BOOL                                CryptHashMessage(                                   PCRYPT_HASH_MESSAGE_PARA pHashPara, BOOL fDetachedHash, DWORD cToBeHashed, const BYTE* rgpbToBeHashed, DWORD rgcbToBeHashed, BYTE* pbHashedBlob, DWORD* pcbHashedBlob, BYTE* pbComputedHash, DWORD* pcbComputedHash);
  BOOL                                CryptSignAndEncryptMessage(                         PCRYPT_SIGN_MESSAGE_PARA pSignPara, PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara, DWORD cRecipientCert, PCCERT_CONTEXT rgpRecipientCert, const BYTE* pbToBeSignedAndEncrypted, DWORD cbToBeSignedAndEncrypted, BYTE* pbSignedAndEncryptedBlob, DWORD* pcbSignedAndEncryptedBlob);
  BOOL                                CryptSignMessageWithKey(                            PCRYPT_KEY_SIGN_MESSAGE_PARA pSignPara, const BYTE* pbToBeSigned, DWORD cToBeSigned, BYTE* pbSignedBlob, DWORD* pcbSignedBlob);
  BOOL                                CryptSignMessage(                                   PCRYPT_SIGN_MESSAGE_PARA pSignPara, BOOL fDetachedSignature, DWORD cToBeSigned, const BYTE* rgpbToBeSigned, DWORD rgcbToBeSigned, BYTE* pbSignedBlob, DWORD* pcbSignedBlob);
  BOOL                                CryptVerifyDetachedMessageHash(                     PCRYPT_HASH_MESSAGE_PARA pHashPara, BYTE* pbDetachedHashBlob, DWORD cbDetachedHashBlob, DWORD cToBeHashed, const BYTE* rgpbToBeHashed, DWORD rgcbToBeHashed, BYTE* pbComputedHash, DWORD* pcbComputedHash);
  BOOL                                CryptVerifyDetachedMessageSignature(                PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const BYTE* pbDetachedSignBlob, DWORD cbDetachedSignBlob, DWORD cToBeSigned, const BYTE* rgpbToBeSigned, DWORD rgcbToBeSigned, PCCERT_CONTEXT* ppSignerCert);
  BOOL                                CryptVerifyMessageHash(                             PCRYPT_HASH_MESSAGE_PARA pHashPara, BYTE* pbHashedBlob, DWORD cbHashedBlob, BYTE* pbToBeHashed, DWORD* pcbToBeHashed, BYTE* pbComputedHash, DWORD* pcbComputedHash);
  BOOL                                CryptVerifyMessageSignature(                        PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const BYTE* pbSignedBlob, DWORD cbSignedBlob, BYTE* pbDecoded, DWORD* pcbDecoded, PCCERT_CONTEXT* ppSignerCert);
  BOOL                                CryptVerifyMessageSignatureWithKey(                 PCRYPT_KEY_VERIFY_MESSAGE_PARA pVerifyPara, PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, const BYTE* pbSignedBlob, DWORD cbSignedBlob, BYTE* pbDecoded, DWORD* pcbDecoded);
  BOOL                                CertCompareCertificate(                             WINAPI_CertEncodingType dwCertEncodingType, PCERT_INFO pCertId1, PCERT_INFO pCertId2);
  BOOL                                CertCompareCertificateName(                         WINAPI_CertEncodingType dwCertEncodingType, PCERT_NAME_BLOB pCertName1, PCERT_NAME_BLOB pCertName2);
  BOOL                                CertCompareIntegerBlob(                             PCRYPT_INTEGER_BLOB pInt1, PCRYPT_INTEGER_BLOB pInt2);
  BOOL                                CertComparePublicKeyInfo(                           WINAPI_CertEncodingType dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pPublicKey1, PCERT_PUBLIC_KEY_INFO pPublicKey2);
  PCRYPT_ATTRIBUTE                    CertFindAttribute(                                  LPCSTR pszObjId, DWORD cAttr, CRYPT_ATTRIBUTE* rgAttr);
  PCERT_EXTENSION                     CertFindExtension(                                  LPCSTR pszObjId, DWORD cExtensions, CERT_EXTENSION* rgExtensions);
  PCERT_RDN_ATTR                      CertFindRDNAttr(                                    LPCSTR pszObjId, PCERT_NAME_INFO pName);
  BOOL                                CertGetIntendedKeyUsage(                            WINAPI_CertEncodingType dwCertEncodingType, PCERT_INFO pCertInfo, BYTE* pbKeyUsage, DWORD cbKeyUsage);
  DWORD                               CertGetPublicKeyLength(                             WINAPI_CertEncodingType dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pPublicKey);
  BOOL                                CertIsRDNAttrsInCertificateName(                    WINAPI_CertEncodingType dwCertEncodingType, DWORD dwFlags, PCERT_NAME_BLOB pCertName, PCERT_RDN pRDN);
  BOOL                                CertVerifyCRLRevocation(                            WINAPI_CertEncodingType dwCertEncodingType, PCERT_INFO pCertId, DWORD cCrlInfo, PCRL_INFO rgpCrlInfo);
  LONG                                CertVerifyCRLTimeValidity(                          LPFILETIME pTimeToVerify, PCRL_INFO pCrlInfo);
  BOOL                                CertVerifyRevocation(                               WINAPI_CertEncodingType dwEncodingType, DWORD dwRevType, DWORD cContext, PVOID rgpvContext, DWORD dwFlags, PCERT_REVOCATION_PARA pRevPara, PCERT_REVOCATION_STATUS pRevStatus);
  LONG                                CertVerifyTimeValidity(                             LPFILETIME pTimeToVerify, PCERT_INFO pCertInfo);
  BOOL                                CertVerifyValidityNesting(                          PCERT_INFO pSubjectInfo, PCERT_INFO pIssuerInfo);
  BOOL                                CryptExportPKCS8(                                   HCRYPTPROV hCryptProv, WINAPI_CryptKeySpec dwKeySpec, LPSTR pszPrivateKeyObjId, DWORD dwFlags, void* pvAuxInfo, BYTE* pbPrivateKeyBlob, DWORD* pcbPrivateKeyBlob);
  BOOL                                CryptExportPKCS8Ex(                                 CRYPT_PKCS8_EXPORT_PARAMS* psExportParams, DWORD dwFlags, void* pvAuxInfo, BYTE* pbPrivateKeyBlob, DWORD* pcbPrivateKeyBlob);
  BOOL                                CryptExportPublicKeyInfo(                           HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, WINAPI_CryptKeySpec dwKeySpec, WINAPI_CertEncodingType dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, DWORD* pcbInfo);
  BOOL                                CryptExportPublicKeyInfoEx(                         HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, WINAPI_CryptKeySpec dwKeySpec, WINAPI_CertEncodingType dwCertEncodingType, LPSTR pszPublicKeyObjId, DWORD dwFlags, void* pvAuxInfo, PCERT_PUBLIC_KEY_INFO pInfo, DWORD* pcbInfo);
  BOOL                                CryptExportPublicKeyInfoFromBCryptKeyHandle(        BCRYPT_KEY_HANDLE hBCryptKey, WINAPI_CertEncodingType dwCertEncodingType, LPSTR pszPublicKeyObjId, DWORD dwFlags, void* pvAuxInfo, PCERT_PUBLIC_KEY_INFO pInfo, DWORD pcbInfo);
  BOOL                                CryptFindCertificateKeyProvInfo(                    PCCERT_CONTEXT pCert, DWORD dwFlags, void* pvReserved);
  LPCWSTR                             CryptFindLocalizedName(                             LPCWSTR pwszCryptName);
  BOOL                                CryptHashCertificate(                               HCRYPTPROV_LEGACY hCryptProv, ALG_ID Algid, DWORD dwFlags, const BYTE* pbEncoded, DWORD cbEncoded, BYTE* pbComputedHash, DWORD* pcbComputedHash);
  BOOL                                CryptHashCertificate2(                              LPCWSTR pwszCNGHashAlgid, DWORD dwFlags, void* pvReserved, BYTE* pbEncoded, DWORD cbEncoded, BYTE* pbComputedHash, DWORD* pcbComputedHash);
  BOOL                                CryptHashPublicKeyInfo(                             HCRYPTPROV_LEGACY hCryptProv, ALG_ID Algid, DWORD dwFlags, WINAPI_CertEncodingType dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, BYTE* pbComputedHash, DWORD* pcbComputedHash);
  BOOL                                CryptHashToBeSigned(                                HCRYPTPROV_LEGACY hCryptProv, WINAPI_CertEncodingType dwCertEncodingType, const BYTE* pbEncoded, DWORD cbEncoded, BYTE* pbComputedHash, DWORD* pcbComputedHash);
  BOOL                                CryptImportPKCS8(                                   CRYPT_PKCS8_IMPORT_PARAMS sPrivateKeyAndParams, DWORD dwFlags, HCRYPTPROV* phCryptProv, void* pvAuxInfo);
  BOOL                                CryptImportPublicKeyInfo(                           HCRYPTPROV hCryptProv, WINAPI_CertEncodingType dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, HCRYPTKEY* phKey);
  BOOL                                CryptImportPublicKeyInfoEx(                         HCRYPTPROV hCryptProv, WINAPI_CertEncodingType dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, ALG_ID aiKeyAlg, DWORD dwFlags, void* pvAuxInfo, HCRYPTKEY* phKey);
  BOOL                                CryptImportPublicKeyInfoEx2(                        WINAPI_CertEncodingType dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, DWORD dwFlags, void* pvAuxInfo, BCRYPT_KEY_HANDLE* phKey);
  LPVOID                              CryptMemAlloc(                                      ULONG cbSize);
  void                                CryptMemFree(                                       LPVOID pv);
  LPVOID                              CryptMemRealloc(                                    LPVOID pv, ULONG cbSize);
  BOOL                                CryptQueryObject(                                   WINAPI_CryptObjectType dwObjectType, const void* pvObject, WINAPI_CryptExpectedContentType dwExpectedContentTypeFlags, WINAPI_CryptExpectedFormatType dwExpectedFormatTypeFlags, DWORD dwFlags, WINAPI_CertEncodingType* pdwMsgAndCertEncodingType, WINAPI_CryptContentType* pdwContentType, WINAPI_CryptFormatType* pdwFormatType, HCERTSTORE* phCertStore, HCRYPTMSG* phMsg, const void** ppvContext);
  BOOL                                CryptSignAndEncodeCertificate(                      HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, WINAPI_CryptKeySpec dwKeySpec, WINAPI_CertEncodingType dwCertEncodingType, LPCSTR lpszStructType, const void* pvStructInfo, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, const void* pvHashAuxInfo, PBYTE pbEncoded, DWORD* pcbEncoded);
  BOOL                                CryptSignCertificate(                               HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, WINAPI_CryptKeySpec dwKeySpec, WINAPI_CertEncodingType dwCertEncodingType, const BYTE* pbEncodedToBeSigned, DWORD cbEncodedToBeSigned, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, const void* pvHashAuxInfo, BYTE* pbSignature, DWORD* pcbSignature);
  BOOL                                CryptSIPAddProvider(                                SIP_ADD_NEWPROVIDER* psNewProv);
  BOOL                                CryptSIPCreateIndirectData(                         SIP_SUBJECTINFO* pSubjectInfo, DWORD* pcbIndirectData, SIP_INDIRECT_DATA* pIndirectData);
  BOOL                                CryptSIPGetSignedDataMsg(                           SIP_SUBJECTINFO* pSubjectInfo, WINAPI_CertEncodingType* pdwEncodingType, DWORD dwIndex, DWORD* pcbSignedDataMsg, BYTE* pbSignedDataMsg);
  BOOL                                CryptSIPLoad(                                       const GUID* pgSubject, DWORD dwFlags, SIP_DISPATCH_INFO* pSipDispatch);
  BOOL                                CryptSIPPutSignedDataMsg(                           SIP_SUBJECTINFO* pSubjectInfo, WINAPI_CertEncodingType* pdwEncodingType, DWORD dwIndex, DWORD* pcbSignedDataMsg, BYTE* pbSignedDataMsg);
  BOOL                                CryptSIPRemoveProvider(                             GUID* pgProv);
  BOOL                                CryptSIPRemoveSignedDataMsg(                        SIP_SUBJECTINFO* pSubjectInfo, DWORD dwIndex);
  BOOL                                CryptSIPRetrieveSubjectGuid(                        LPCWSTR FileName, HANDLE hFileIn, GUID* pgSubject);
  BOOL                                CryptSIPRetrieveSubjectGuidForCatalogFile(          LPCWSTR FileName, HANDLE hFileIn, GUID* pgSubject);
  BOOL                                CryptSIPVerifyIndirectData(                         SIP_SUBJECTINFO* pSubjectInfo, SIP_INDIRECT_DATA* pIndirectData);
  BOOL                                CryptUpdateProtectedState(                          PSID pOldSid, LPCWSTR pwszOldPassword, DWORD dwFlags, DWORD* pdwSuccessCount, DWORD* pdwFailureCount);
  BOOL                                CryptVerifyCertificateSignature(                    HCRYPTPROV_LEGACY hCryptProv, WINAPI_CertEncodingType dwCertEncodingType, BYTE* pbEncoded, DWORD cbEncoded, PCERT_PUBLIC_KEY_INFO pPublicKey);
  BOOL                                CryptVerifyCertificateSignatureEx(                  HCRYPTPROV_LEGACY hCryptProv, WINAPI_CertEncodingType dwCertEncodingType, WINAPI_CryptSubjectType dwSubjectType, void* pvSubject, WINAPI_CryptIssuerType dwIssuerType, void* pvIssuer, DWORD dwFlags, void* pvReserved);
  LPCSTR                              CertAlgIdToOID(                                     DWORD dwAlgId);
  DWORD                               CertGetNameStringA(                                 PCCERT_CONTEXT pCertContext, WINAPI_CertNameType dwType, WINAPI_CertNameFlags dwFlags, void* pvTypePara, LPSTR pszNameString, DWORD cchNameString);
  DWORD                               CertGetNameStringW(                                 PCCERT_CONTEXT pCertContext, WINAPI_CertNameType dwType, WINAPI_CertNameFlags dwFlags, void* pvTypePara, LPWSTR pszNameString, DWORD cchNameString);
  DWORD                               CertNameToStrA(                                     WINAPI_CertEncodingType dwCertEncodingType, PCERT_NAME_BLOB pName, WINAPI_CertStrType dwStrType, LPSTR psz, DWORD csz);
  DWORD                               CertNameToStrW(                                     WINAPI_CertEncodingType dwCertEncodingType, PCERT_NAME_BLOB pName, WINAPI_CertStrType dwStrType, LPWSTR psz, DWORD csz);
  DWORD                               CertOIDToAlgId(                                     LPCSTR pszObjId);
  DWORD                               CertRDNValueToStrA(                                 DWORD dwValueType, PCERT_RDN_VALUE_BLOB pValue, LPSTR psz, DWORD csz);
  DWORD                               CertRDNValueToStrW(                                 DWORD dwValueType, PCERT_RDN_VALUE_BLOB pValue, LPWSTR psz, DWORD csz);
  BOOL                                CertStrToNameA(                                     WINAPI_CertEncodingType dwCertEncodingType, LPCSTR pszX500, WINAPI_CertStrType dwStrType, void* pvReserved, BYTE* pbEncoded, DWORD* pcbEncoded, LPCSTR* ppszError);
  BOOL                                CertStrToNameW(                                     WINAPI_CertEncodingType dwCertEncodingType, LPCWSTR pszX500, WINAPI_CertStrType dwStrType, void* pvReserved, BYTE* pbEncoded, DWORD* pcbEncoded, LPCWSTR* ppszError);
  BOOL                                CryptBinaryToStringA(                               const BYTE* pbBinary, DWORD cbBinary, WINAPI_CryptStringFlags dwFlags, LPSTR pszString, DWORD* pcchString);
  BOOL                                CryptBinaryToStringW(                               const BYTE* pbBinary, DWORD cbBinary, WINAPI_CryptStringFlags dwFlags, LPWSTR pszString, DWORD* pcchString);
  BOOL                                CryptFormatObject(                                  WINAPI_CertEncodingType dwCertEncodingType, DWORD dwFormatType, WINAPI_CryptFormatStrType dwFormatStrType, void* pFormatStruct, LPCSTR lpszStructType, const BYTE* pbEncoded, DWORD cbEncoded, void* pbFormat, DWORD* pcbFormat);
  BOOL                                CryptStringToBinaryA(                               LPCSTR pszString, DWORD cchString, WINAPI_CryptStringFlags dwFlags, BYTE* pbBinary, DWORD* pcbBinary, DWORD* pdwSkip, WINAPI_CryptStringFlags* pdwFlags);
  BOOL                                CryptStringToBinaryW(                               LPCWSTR pszString, DWORD cchString, WINAPI_CryptStringFlags dwFlags, BYTE* pbBinary, DWORD* pcbBinary, DWORD* pdwSkip, WINAPI_CryptStringFlags* pdwFlags);
  BOOL                                CertAddEnhancedKeyUsageIdentifier(                  PCCERT_CONTEXT pCertContext, LPCSTR pszUsageIdentifier);
  BOOL                                CertGetEnhancedKeyUsage(                            PCCERT_CONTEXT pCertContext, WINAPI_CertFindFlags dwFlags, PCERT_ENHKEY_USAGE pUsage, DWORD* pcbUsage);
  BOOL                                CertRemoveEnhancedKeyUsageIdentifier(               PCCERT_CONTEXT pCertContext, LPCSTR pszUsageIdentifier);
  BOOL                                CertSetEnhancedKeyUsage(                            PCCERT_CONTEXT pCertContext, PCERT_ENHKEY_USAGE pUsage);
  BOOL                                CryptCreateKeyIdentifierFromCSP(                    WINAPI_CertEncodingType dwCertEncodingType, LPCSTR pszPubKeyOID, const PUBLICKEYSTRUC* pPubKeyStruc, DWORD cbPubKeyStruc, DWORD dwFlags, void* pvReserved, BYTE* pbHash, DWORD* pcbHash);
  BOOL                                CryptEnumKeyIdentifierProperties(                   const CRYPT_HASH_BLOB* pKeyIdentifier, DWORD dwPropId, DWORD dwFlags, LPCWSTR pwszComputerName, void* pvReserved, void* pvArg, PFN_CRYPT_ENUM_KEYID_PROP pfnEnum);
  BOOL                                CryptGetKeyIdentifierProperty(                      const CRYPT_HASH_BLOB* pKeyIdentifier, DWORD dwPropId, DWORD dwFlags, LPCWSTR pwszComputerName, void* pvReserved, void* pvData, DWORD* pcbData);
  BOOL                                CryptSetKeyIdentifierProperty(                      const CRYPT_HASH_BLOB* pKeyIdentifier, DWORD dwPropId, DWORD dwFlags, LPCWSTR pwszComputerName, void* pvReserved, const void* pvData);
  BOOL                                CryptEnumOIDFunction(                               WINAPI_CertEncodingType dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, DWORD dwFlags, void* pvArg, PFN_CRYPT_ENUM_OID_FUNC pfnEnumOIDFunc);
  BOOL                                CryptEnumOIDInfo(                                   WINAPI_CryptGroupId dwGroupId, DWORD dwFlags, void* pvArg, PFN_CRYPT_ENUM_OID_INFO pfnEnumOIDInfo);
  PCCRYPT_OID_INFO                    CryptFindOIDInfo(                                   WINAPI_CryptFindOidInfoKeyType dwKeyType, void* pvKey, WINAPI_CryptFindOidInfoGroudId dwGroupId);
  BOOL                                CryptFreeOIDFunctionAddress(                        HCRYPTOIDFUNCADDR hFuncAddr, DWORD dwFlags);
  BOOL                                CryptGetOIDFunctionAddress(                         HCRYPTOIDFUNCSET hFuncSet, WINAPI_CertEncodingType dwEncodingType, LPCSTR pszOID, DWORD dwFlags, void** ppvFuncAddr, HCRYPTOIDFUNCADDR* phFuncAddr);
  BOOL                                CryptGetDefaultOIDFunctionAddress(                  HCRYPTOIDFUNCSET hFuncSet, WINAPI_CertEncodingType dwEncodingType, LPCWSTR pwszDll, DWORD dwFlags, void** ppvFuncAddr, HCRYPTOIDFUNCADDR* phFuncAddr);
  BOOL                                CryptGetDefaultOIDDllList(                          HCRYPTOIDFUNCSET hFuncSet, WINAPI_CertEncodingType dwEncodingType, LPWSTR pwszDllList, DWORD* pcchDllList);
  BOOL                                CryptGetOIDFunctionValue(                           WINAPI_CertEncodingType dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, LPCWSTR pwszValueName, DWORD* pdwValueType, BYTE* pbValueData, DWORD* pcbValueData);
  HCRYPTOIDFUNCSET                    CryptInitOIDFunctionSet(                            LPCSTR pszFuncName, DWORD dwFlags);
  BOOL                                CryptInstallOIDFunctionAddress(                     HMODULE hModule, WINAPI_CertEncodingType dwEncodingType, LPCSTR pszFuncName, DWORD cFuncEntry, CRYPT_OID_FUNC_ENTRY* rgFuncEntry, WINAPI_CryptInstallOIDFlags dwFlags);
  BOOL                                CryptRegisterDefaultOIDFunction(                    WINAPI_CertEncodingType dwEncodingType, LPCSTR pszFuncName, DWORD dwIndex, LPCWSTR pwszDll);
  BOOL                                CryptRegisterOIDFunction(                           WINAPI_CertEncodingType dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, LPCWSTR pwszDll, LPCSTR pszOverrideFuncName);
  BOOL                                CryptRegisterOIDInfo(                               PCCRYPT_OID_INFO pInfo, DWORD dwFlags);
  BOOL                                CryptSetOIDFunctionValue(                           WINAPI_CertEncodingType dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, LPCWSTR pwszValueName, DWORD dwValueType, const BYTE* pbValueData, DWORD cbValueData);
  BOOL                                CryptUnregisterDefaultOIDFunction(                  WINAPI_CertEncodingType dwEncodingType, LPCSTR pszFuncName, LPCWSTR pwszDll);
  BOOL                                CryptUnregisterOIDFunction(                         WINAPI_CertEncodingType dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID);
  BOOL                                CryptUnregisterOIDInfo(                             PCCRYPT_OID_INFO pInfo);
  BOOL                                PFXExportCertStore(                                 HCERTSTORE hStore, CRYPT_DATA_BLOB* pPFX, LPCWSTR szPassword, DWORD dwFlags);
  BOOL                                PFXExportCertStoreEx(                               HCERTSTORE hStore, CRYPT_DATA_BLOB* pPFX, LPCWSTR szPassword, void* pvReserved, DWORD dwFlags);
  HCERTSTORE                          PFXImportCertStore(                                 CRYPT_DATA_BLOB* pPFX, LPCWSTR szPassword, DWORD dwFlags);
  BOOL                                PFXIsPFXBlob(                                       CRYPT_DATA_BLOB* pPFX);
  BOOL                                PFXVerifyPassword(                                  CRYPT_DATA_BLOB* pPFX, LPCWSTR szPassword, DWORD dwFlags);
]]
return ffi.load( 'Crypt32.dll' )
